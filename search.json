[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Inspect",
    "section": "",
    "text": "Welcome\nWelcome to Inspect, a framework for large language model evaluations created by the UK AI Safety Institute.\nInspect provides many built-in components, including facilities for prompt engineering, tool usage, multi-turn dialog, and model graded evaluations. Extensions to Inspect (e.g. to support new elicitation and scoring techniques) can be provided by other Python packages.\nWe’ll walk through a fairly trivial “Hello, Inspect” example below. Read on to learn the basics, then read the documentation on Workflow, Solvers, Tools, Scorers, Datasets, and Models to learn how to create more advanced evaluations.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#getting-started",
    "href": "index.html#getting-started",
    "title": "Inspect",
    "section": "Getting Started",
    "text": "Getting Started\nFirst, install Inspect with:\n$ pip install inspect-ai\nTo develop and run evaluations, you’ll also need access to a model, which typically requires installation of a Python package as well as ensuring that the appropriate API key is available in the environment.\nAssuming you had written an evaluation in a script named arc.py, here’s how you would setup and run the eval for a few different model providers:\n\nOpenAIAnthropicGoogleMistralHFvLLMTogether\n\n\n$ pip install openai\n$ export OPENAI_API_KEY=your-openai-api-key\n$ inspect eval arc.py --model openai/gpt-4\n\n\n$ pip install anthropic\n$ export ANTHROPIC_API_KEY=your-anthropic-api-key\n$ inspect eval arc.py --model anthropic/claude-3-opus-20240229\n\n\n$ pip install google-generativeai\n$ export GOOGLE_API_KEY=your-google-api-key\n$ inspect eval arc.py --model google/gemini-1.0-pro\n\n\n$ pip install mistralai\n$ export MISTRAL_API_KEY=your-mistral-api-key\n$ inspect eval arc.py --model mistral/mistral-large-latest\n\n\n$ pip install torch transformers\n$ export HF_TOKEN=your-hf-token\n$ inspect eval arc.py --model hf/meta-llama/Llama-2-7b-chat-hf\n\n\n$ pip install vllm\n$ inspect eval arc.py --model vllm/meta-llama/Llama-2-7b-chat-hf\n\n\n$ pip install openai\n$ export TOGETHER_API_KEY=your-together-api-key\n$ inspect eval ctf.py --model together/Qwen/Qwen1.5-72B-Chat\n\n\n\nIn addition to the model providers shown above, Inspect also supports models hosted on Azure AI, AWS Bedrock, and Cloudflare, as well as local models with Ollama. See the documentation on Models for additional details.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#sec-hello-inspect",
    "href": "index.html#sec-hello-inspect",
    "title": "Inspect",
    "section": "Hello, Inspect",
    "text": "Hello, Inspect\nInspect evaluations have three main components:\n\nDatasets contain a set of labeled samples. Datasets are typically just a table with input and target columns, where input is a prompt and target is either literal value(s) or grading guidance.\nSolvers are composed together in a plan to evaluate the input in the dataset. The most elemental solver, generate(), just calls the model with a prompt and collects the output. Other solvers might do prompt engineering, multi-turn dialog, critique, etc.\nScorers evaluate the final output of solvers. They may use text comparisons, model grading, or other custom schemes\n\nLet’s take a look at a simple evaluation that aims to see how models perform on the Sally-Anne test, which assesses the ability of a person to infer false beliefs in others. Here are some samples from the dataset:\n\n\n\n\n\n\n\ninput\ntarget\n\n\n\n\nJackson entered the hall. Chloe entered the hall. The boots is in the bathtub. Jackson exited the hall. Jackson entered the dining_room. Chloe moved the boots to the pantry. Where was the boots at the beginning?\nbathtub\n\n\nHannah entered the patio. Noah entered the patio. The sweater is in the bucket. Noah exited the patio. Ethan entered the study. Ethan exited the study. Hannah moved the sweater to the pantry. Where will Hannah look for the sweater?\npantry\n\n\n\nHere’s the code for the evaluation (click on the numbers at right for further explanation):\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import example_dataset\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import (               \n  chain_of_thought, generate, self_critique   \n)                                             \n\n@task\ndef theory_of_mind():\n1    return Task(\n        dataset=example_dataset(\"theory_of_mind\"),\n        plan=[\n2          chain_of_thought(),\n          generate(),\n          self_critique()\n        ],\n3        scorer=model_graded_fact()\n    )\n\n1\n\nThe Task object brings together the dataset, solvers, and scorer, and is then evaluated using a model.\n\n2\n\nIn this example we are chaining together three standard solver components. It’s also possible to create a more complex custom solver that manages state and interactions internally.\n\n3\n\nSince the output is likely to have pretty involved language, we use a model for scoring.\n\n\nNote that this is a purposely over-simplified example! The templates used for prompting, critique, and grading can all be customised, and in a more rigorous evaluation we’d explore improving them in the context of this specific dataset.\nThe @task decorator applied to the theory_of_mind() function is what enables inspect eval to find and run the eval in the source file passed to it. For example, here we run the eval against GPT-4:\n$ inspect eval theory_of_mind.py --model openai/gpt-4\n\nBy default, eval logs are written to the ./logs sub-directory of the current working directory. When the eval is complete you will find a link to the log at the bottom of the task results summary.\nYou can also explore eval results using the Inspect log viewer. Run inspect view to open the viewer (you only need to do this once as the viewer will automatically updated when new evals are run):\n$ inspect view\n\nSee the Log Viewer section for additional details on using Inspect View.\n\n\n\n\n\n\nThis example demonstrates evals being run from the terminal with the inspect eval command. There is also an eval() function which can be used for exploratory work—this is covered further in Workflow.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "index.html#learning-more",
    "href": "index.html#learning-more",
    "title": "Inspect",
    "section": "Learning More",
    "text": "Learning More\nTo get started with Inspect, we highly recommend you read at least these sections for a high level overview of the system:\n\nWorkflow covers the mechanics of running evaluations, including how to create evals in both scripts and notebooks, specifying configuration and options, how to parameterise tasks for different scenarios, and how to work with eval log files.\nLog Viewer goes into more depth on how to use Inspect View to develop and debug evaluations, including how to provide additional log metadata and how to integrate it with Python’s standard logging module.\nVS Code provides documentation on using the Inspect VS Code Extension to run, tune, debug, and visualise evaluations.\nExamples includes several complete examples with commentary on the use of various features (as with the above example, they are fairly simplistic for the purposes of illustration). You can also find implementations of a few popular LLM benchmarks in the Inspect repository.\n\nThese sections provide a more in depth treatment of the various components used in evals. Read them as required as you learn to build evaluations.\n\nSolvers are the heart of Inspect, and encompass prompt engineering and various other elicitation strategies (the plan in the example above). Here we cover using the built-in solvers and creating your own more sophisticated ones.\nTools provide a means of extending the capabilities of models by registering Python functions for them to call. This section describes how to create custom tools and use them in evaluations.\nAgents combine planning, memory, and tool usage to pursue more complex, longer horizon tasks. This section describes how to build agent evaluations with Inspect.\nScorers evaluate the work of solvers and aggregate scores into metrics. Sophisticated evals often require custom scorers that use models to evaluate output. This section covers how to create them.\nDatasets provide samples to evaluation tasks. This section illustrates how to adapt various data sources for use with Inspect, as well as how to include multi-modal data (images, etc.) in your datasets.\nModels provide a uniform API for both evaluating a variety of large language models and using models within evaluations (e.g. for critique or grading).\n\nThese sections discuss more advanced features and workflow. You don’t need to review them at the outset, but be sure to revisit them as you get more comfortable with the basics.\n\nCaching enables you to cache model output to reduce the number of API calls made, saving both time and expense.\nParallelism delves into how to obtain maximum performance for evaluations. Inspect uses a highly parallel async architecture—here we cover how to tune this parallelism (e.g to stay under API rate limits or to not overburden local compute) for optimal throughput.\nEval Logs explores how to get the most out of evaluation logs for developing, debugging, and analyzing evaluations.\nEval Suites covers Inspect’s features for describing, running, and analysing larger sets of evaluation tasks.\nExtensions describes the various ways you can extend Inspect, including adding support for new Model APIs, tool execution environments, and storage platforms (for datasets, prompts, and logs).",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Welcome</span>"
    ]
  },
  {
    "objectID": "workflow.html",
    "href": "workflow.html",
    "title": "Workflow",
    "section": "",
    "text": "Eval Basics\nTo create an evaluation, write a function that returns a Task. This task will bring together the dataset, solvers, scorer, and configuration required for the evaluation. Here’s the example used in the introduction:\nWe walked through this code in detail in Hello, Inspect so won’t do so again here (you may want to refer back to that section now if this code isn’t familiar to you).",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#eval-basics",
    "href": "workflow.html#eval-basics",
    "title": "Workflow",
    "section": "",
    "text": "from inspect_ai import Task, task\nfrom inspect_ai.dataset import example_dataset\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import (\n  chain_of_thought, generate, self_critique\n)\n\n@task\ndef theory_of_mind():\n    return Task(\n        dataset=example_dataset(\"theory_of_mind\"),\n        plan=[\n          chain_of_thought(), \n          generate(), \n          self_critique()\n        ],\n        scorer=model_graded_fact(),\n    )\n\n\nRunning\nYou can run this evaluation from the shell using the inspect eval command. For example:\n$ inspect eval theory.py --model openai/gpt-4\n\nImmediately after an evaluation completes, a link to the log for the evaluation is written to the terminal.\n\n\n\n\n\n\nVS Code Extension\n\n\n\nIf you are using VS Code, we also recommend installing the VS Code Extension, which includes tools for running, tuning, debugging, and visualising evals. See the article on the VS Code Extension for more details on installing and using the extension.\n\n\n\n\nModels\nRun the evaluation against other models as follows:\n$ inspect eval theory.py --model anthropic/claude-3-opus-20240229\n$ inspect eval theory.py --model mistral/mistral-large-latest\n$ inspect eval theory.py --model hf/meta-llama/Llama-2-7b-chat-hf\nMost often you’ll work with one model at a time. In this case, setting the INSPECT_EVAL_MODEL environment variable might make sense:\n$ export INSPECT_EVAL_MODEL=google/gemini-1.0-pro\n$ inspect eval theory.py\n\n\nVisualising\nAs you iterate on an evaluation, you’ll typically want to dig further into message histories, scoring decisions, and other diagnostics. Typically at the outset of working session you’ll run inspect view to open the Inspect Log Viewer:\n$ inspect view\n\nThe log viewer will update automatically whenever a new evaluation is completed (you can also navigate back to previous evaluations). The log viewer summarises aggregate data and also provides a detailed view into each sample. For example, here we zoom in on the model’s scoring explanation for a specific sample:\n\nSee the Log Viewer section for additional details on using Inspect View.\n\n\nOptions\nThere are several other command line options you can pass to eval. Here are some of the more useful ones:\n# limit to 10 samples\n$ inspect eval theory.py --limit 10\n\n# limit tokens\n$ inspect eval theory.py --max-tokens 128\n\n# set temperature and seed\n$ inspect eval theory.py --temperature 0 --seed 42",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#sec-workflow-configuration",
    "href": "workflow.html#sec-workflow-configuration",
    "title": "Workflow",
    "section": "Configuration",
    "text": "Configuration\nAs you can see, there is often a lot of configuration required for calling inspect eval. While we can include it all on the command line, it’s generally easier to use environment variables. To facilitate this, the inspect CLI will automatically read and process .env files located in both the working directory and the directory where the task source file is located (this is done using the python-dotenv package).\nFor example, here’s a .env file that makes available API keys for several providers and sets a bunch of defaults for a working session:\nOPENAI_API_KEY=your-api-key\nANTHROPIC_API_KEY=your-api-key\nGOOGLE_API_KEY=your-api-key\n\nINSPECT_LOG_DIR=./logs-04-07-2024\nINSPECT_LOG_LEVEL=info\n\nINSPECT_EVAL_MAX_RETRIES=10\nINSPECT_EVAL_MAX_CONNECTIONS=20\nINSPECT_EVAL_MODEL=anthropic/claude-3-opus-20240229\nAll command line options can also be set via environment variable by using the INSPECT_EVAL_ prefix. See inspect eval –-help for documentation on all available options.\nNote that .env files are searched for in parent directories, so if you run an Inspect command from a subdirectory of a parent that has an .env file, it will still be read and resolved. If you define a relative path to INSPECT_LOG_DIR in a .env file, then its location will always be resolved as relative to that .env file (rather than relative to whatever your current working directory is when you run inspect eval).\n\n\n\n\n\n\n.env files should never be checked into version control, as they nearly always contain either secret API keys or machine specific paths. A best practice is often to check in an .env.example file to version control which provides an outline (e.g. keys only not values) of variables that are required by the current project.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#exploratory",
    "href": "workflow.html#exploratory",
    "title": "Workflow",
    "section": "Exploratory",
    "text": "Exploratory\nEvaluation development is often highly exploratory and requires trying (and measuring) many combinations of components. You’ll often want to start in a notebook or REPL to facilitate this.\nFor exploratory work, you’ll still write a @task function, but you’ll give it arguments that reflect the things you want to try out and vary. You’ll then call Inspect’s eval() function interactively rather than calling inspect eval from the shell.\n\n\n\n\n\n\nNote that the code below demonstrates exploratory workflows, but unlike the code above isn’t intended for direct execution but rather only for illustration. For example, we call the plot_results() function which isn’t directly defined but rather just an example of a function you might call after running some eval tasks.\n\n\n\n\nTask Args\nTo illustrate, we’ll use a very simple example: an evaluation that checks whether a model can provide good computer security advice. The eval uses a model to score the results, and we want to explore how different system prompts, grader instructions, and grader models affect the quality of the eval.\nTo do this, we add some arguments to our @task function. Here’s the basic setup for the evaluation:\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import json_dataset\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import generate, system_message\n\nfrom itertools import product\n\n@task\ndef security_guide(\n    system=\"devops.txt\", \n    grader=\"expert.txt\",\n    grader_model=\"openai/gpt-4\"\n):\n   return Task(\n      dataset=json_dataset(\"security_guide.jsonl\"),\n      plan=[system_message(system), generate()],\n      scorer=model_graded_fact(\n          template=grader, model=grader_model\n      )\n   )\nThe system and grader arguments point to files we are using as system message and grader model templates. At the outset we might want to explore every possible combination of these parameters. We can use the itertools.product function to do this:\n# 'grid' will be a permutation of all parameters\nparams = {\n    \"system\": [\"devops.txt\", \"researcher.txt\"],\n    \"grader\": [\"hacker.txt\", \"expert.txt\"],\n    \"grader_model\": [\"openai/gpt-4\", \"google/gemini-1.0-pro\"],\n}\ngrid = list(product(*(params[name] for name in params)))\n\n# run the evals and capture the logs\nlogs = eval(\n    [\n        security_guide(system, grader, grader_model)\n        for system, grader, grader_model in grid\n    ],\n    model=\"mistral/mistral-large-latest\",\n)\n\n# analyze the logs...\nplot_results(logs)\nCalling the eval() function interactively yields the same progress treatment and results display that you see when running inspect eval from the terminal. However, as demonstrated above, a list of EvalLog objects is also returned that enables you to compute on the results of the evaluation (do diagnostics, generate plots, etc.).\nNote that if errors occur in one task, it won’t interrupt the entire call to eval(). Rather, an EvalLog with a status of \"error\" will be returned. So a more realistic code snippet for handling the result of eval() might be something like this:\nplot_results([log for log in logs if log.status == \"success\"])\nYou might additionally choose to print error messages for failed tasks, or perhaps even abandon plotting altogether if all of the evals don’t succeed.\nSee Eval Logs for additional details on working with evaluation logs.\n\n\nTransition\nIdeally we could have a nice transition between the parameterized task functions created in exploratory mode and the more static eval definitions used for inspect eval. We can actually do this fairly easily by letting Python know that certain parts of our script (the exploratory code) should not be run when it is read as a module by inspect eval.\nReturning to the example above, let’s say that after experimenting, we were comfortable with our grader, and are now only iterating on the system prompt:\n@task\ndef security_guide(system=\"devops.txt\"):\n   return Task(\n      dataset=json_dataset(\"security_guide.jsonl\"),\n      plan=[system_message(system), generate()],\n      scorer=model_graded_fact(\n          template=\"expert.txt\", model=\"openai/gpt-4\"\n      )\n   )\n\n# vary the system prompt\ntasks = [\n    security_guide(system=prompt)\n    for prompt in [\"devops.txt\", \"researcher.txt\"]\n]\neval(tasks, model = \"openai/gpt-4\")\nIf we enclose the exploratory code at the bottom in a __name__ == \"__main__\" conditional, then it will only be run when interactively executing the script or notebook cell that the code is contained in:\nif __name__ == \"__main__\":\n    # vary the system prompt\n    tasks = [\n        security_guide(system=prompt)\n        for prompt in [\"devops.txt\", \"researcher.txt\"]\n    ]\n    eval(tasks, model = \"openai/gpt-4\")\n\n\n\n\n\n\nIf you aren’t familiar with the __name__ == \"__main__\" idiom, see the docs on __main__ for additional details.\n\n\n\nNow we can take the same script and use it with inspect eval (while leaving our exploratory code intact and protected by the __main__ check):\n$ inspect eval security.py \nWe can even continue to use task parameters with inspect eval as follows:\n$ inspect eval security.py -T system=devops.txt\n\n\nNotebooks\nWe refer to notebooks above but show scripts in all of the examples. Everything demonstrated for scripts will work similarly in notebooks, specifically:\n\nYou can use the __name__ == \"__main__\" check to protect cells that should only be run in exploratory mode.\nYou can pass a notebook to inspect eval just the same as a script (including passing task parameters)\n\nFor example, imagine that all of the code shown above for security.py was in security.ipynb. You could run the eval and optionally pass a task parameter as follows:\n$ inspect eval security.ipynb \n$ inspect eval security.ipynb -T system=devops.txt\nOnce you’ve stabilized the definition of an eval, you might also prefer to keep exploratory code and eval task definitions entirely separate. In that case, keep your @task function in security.py and then just import it into one or more notebooks used to try out variations, analyze logs, etc.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "workflow.html#eval-suites",
    "href": "workflow.html#eval-suites",
    "title": "Workflow",
    "section": "Eval Suites",
    "text": "Eval Suites\nThe examples above either run a single evaluation task from a script or notebook, or perhaps run a dynamic set of tasks within an interactive session. While this is a good workflow for the development of evaluations, eventually you may want to compose a set of evaluations into a suite that you run repeatedly for different models.\nFor example, the left/right listing below shows a project with multiple Python scripts, some of which include eval tasks. At right, there is a call to inspect list tasks to enumerate all the tasks:\n\n\n\n\n\n\nsecurity/\n  jeopardy/\n    import.py\n    analyze.py\n    task.py\n  attack_defense/\n    import.py\n    analyze.py\n    task.py\n\n\n$ inspect list tasks\njeopardy/task.py@crypto\njeopardy/task.py@decompile\njeopardy/task.py@packet\njeopardy/task.py@heap_trouble\nattack_defense/task.py@saar\nattack_defense/task.py@bank\nattack_defense/task.py@voting\nattack_defense/task.py@dns\n\n\n\nHere are a few ways you could run these evals as a suite:\n$ inspect eval security \n$ inspect eval security/jeopardy \n$ inspect eval security/attack_defense \nInspect has lots of features aimed at running evaluation suites, including filtering tasks based on tags/metadata, recovering from partially completed suites (due to failed evals), and more. See the documentation on Eval Suites to learn more.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Workflow</span>"
    ]
  },
  {
    "objectID": "log-viewer.html",
    "href": "log-viewer.html",
    "title": "Log Viewer",
    "section": "",
    "text": "Overview\nInspect View provides a convenient way to visualize evaluation logs, including drilling into message histories, scoring decisions, and additional metadata written to the log. Here’s what the main view of an evaluation log looks like:\nBelow we’ll describe how to get the most out of using Inspect View.\nNote that this section covers interactively exploring log files. You can also use the EvalLog API to compute on log files (e.g. to compare across runs or to more systematically traverse results). See the section on Eval Logs to learn more about how to process log files with code.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#view-basics",
    "href": "log-viewer.html#view-basics",
    "title": "Log Viewer",
    "section": "View Basics",
    "text": "View Basics\nTo run Inspect View, use the inspect view command:\n$ inspect view\nBy default, inspect view will use the configured log directory of the environment it is run from (e.g. ./logs). You can specify an alternate log directory using --log-dir ,for example:\n$ inspect view --log-dir ./experiment-logs\nBy default it will run on port 7575 (and kill any existing inspect view using that port). If you want to run two instances of inspect view you can specify an alternate port:\n$ inspect view --log-dir ./experiment-logs --port 6565\nYou only need to run inspect view once at the beginning of a session (as it will automatically update to show new evaluations when they are run).\n\nLog History\nYou can view and navigate between a history of all evals in the log directory using the menu at the top right:",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#sample-details",
    "href": "log-viewer.html#sample-details",
    "title": "Log Viewer",
    "section": "Sample Details",
    "text": "Sample Details\nClick a sample to drill into its messages, scoring, and metadata.\n\nMessages\nThe messages tab displays the message history. In this example we see that the model make two tool calls before answering (the final assistant message is not fully displayed for brevity):\n\nLooking carefully at the message history (especially for agents or multi-turn solvers) is critically important for understanding how well your evaluation is constructed.\n\n\nScoring\nThe scoring tab shows additional details including the full input and full model explanation for answers:\n\n\n\nMetadata\nThe metadata tab shows additional data made available by solvers, tools, an scorers (in this case the web_search() tool records which URLs it visited to retrieve additional context):",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#scores-and-answers",
    "href": "log-viewer.html#scores-and-answers",
    "title": "Log Viewer",
    "section": "Scores and Answers",
    "text": "Scores and Answers\nReliable, high quality scoring is a critical component of every evaluation, and developing custom scorers that deliver this can be challenging. One major difficulty lies in the free form text nature of model output: we have a very specific target we are comparing against and we sometimes need to pick the answer out of a sea of text. Model graded output introduces another set of challenges entirely.\nFor comparison based scoring, scorers typically perform two core tasks:\n\nExtract the answer from the model’s output; and\nCompare the extracted answer to the target.\n\nA scorer can fail to correctly score output at either of these steps. Failing to extract an answer entirely can occur (e.g. due to a regex that’s not quite flexible enough) and as can failing to correctly identify equivalent answers (e.g. thinking that “1,242” is different from “1242.00” or that “Yes.” is different than “yes”).\nYou can use the log viewer to catch and evaluate these sorts of issues. For example, here we can see that we were unable to extract answers for a couple of questions that were scored incorrect:\n\nIt’s possible that these answers are legitimately incorrect. However it’s also possible that the correct answer is in the model’s output but just in a format we didn’t quite expect. In each case you’ll need to drill into the sample to investigate.\nAnswers don’t just appear magically, scorers need to produce them during scoring. The scorers built in to Inspect all do this, but when you create a custom scorer, you should be sure to always include an answer in the Score objects you return if you can. For example:\nreturn Score(\n    value=\"C\" if extracted == target.text else \"I\", \n    answer=extracted, \n    explanation=state.output.completion\n)\nIf we only return the value of “C” or “I” we’d lose the context of exactly what was being compared when the score was assigned.\nNote there is also an explanation field: this is also important, as it allows you to view the entire context from which the answer was extracted from.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#filtering-and-sorting",
    "href": "log-viewer.html#filtering-and-sorting",
    "title": "Log Viewer",
    "section": "Filtering and Sorting",
    "text": "Filtering and Sorting\nIt’s often useful to filter log entries by score (for example, to investigate whether incorrect answers are due to scorer issues or are true negatives). Use the Scores picker to filter by specific scores:\n\nBy default, samples are ordered (with all samples for an epoch presented in sequence). However you can also order by score, or order by samples (so you see all of the results for a given sample across all epochs presented together). Use the Sort picker to control this:\n\nViewing by sample can be especially valuable for diagnosing the sources of inconsistency (and determining whether they are inherent or an artifact of the evaluation methodology). Above we can see that sample 1 is incorrect in epoch 1 because of issue the model had with forming a correct function call.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#python-logging",
    "href": "log-viewer.html#python-logging",
    "title": "Log Viewer",
    "section": "Python Logging",
    "text": "Python Logging\nBeyond the standard information included an eval log file, you may want to do additional console logging to assist with developing and debugging. Inspect installs a log handler that displays logging output above eval progress as well as saves it into the evaluation log file.\nIf you use the recommend practice of the Python logging library for obtaining a logger your logs will interoperate well with Inspect. For example, here we developing a web search tool and want to log each time a query occurs:\n# setup logger for this source file\nlogger = logging.getLogger(__name__)\n\n# log each time we see a web query\nlogger.info(f\"web query: {query}\")\nYou can see all of these log entries in the Logging tab:\n\nIt is important to note that the Inspect View will show all log entries level info or higher. However, printing every info message to the console during an eval might be too distracting, so the default log level for printing is warning. If you change it to info then you’ll also see these log messages in the console:\n$ inspect eval biology_qa.py --log-level info\n\nA default log level of warning enables you to include many calls to logger.info() in your code without having them show by default, while also making them available in the log viewer should you need them.\nNote that you can also set the log level using the INSPECT_LOG_LEVEL environment variable (which is often included in a .env configuration file).",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#task-information",
    "href": "log-viewer.html#task-information",
    "title": "Log Viewer",
    "section": "Task Information",
    "text": "Task Information\nThe Info panel of the log viewer provides additional meta-information about evaluation tasks, including dataset, plan, and scorer details, git revision, and model token usage:",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "log-viewer.html#viewer-embedding",
    "href": "log-viewer.html#viewer-embedding",
    "title": "Log Viewer",
    "section": "Viewer Embedding",
    "text": "Viewer Embedding\nThe log viewer can be published to a static web server and linked to or embedded in another page (for example, in an iframe). To embed the viewer:\n\nCopy the contents of the www directory (src/inspect_ai/_view/www) to the folder you will be publishing.\nCreate a logs sub-directory within the folder into which you placed the contents of the www directory. Place any logs you’d like to display within this logs folder.\nLink to the viewer with the query parameter log_file and the path to a log file. For example:\nhttps://&lt;deployment url&gt;/?log_file=logs/2024-07-18T09-00-04-04-00_bash_QuRMsu7hRUWrJjxe8xePLa.json",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Log Viewer</span>"
    ]
  },
  {
    "objectID": "vscode.html",
    "href": "vscode.html",
    "title": "VS Code Extension",
    "section": "",
    "text": "Installation\nTo install, search for “Inspect AI” in the extensions marketplace panel within VS Code.\nThe Inspect extension will automatically bind to the Python interpreter associated with the current workspace, so you should be sure that the inspect-ai package is installed within that environment. Use the Python: Select Interpreter command to associate a version of Python with your workspace.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>VS Code</span>"
    ]
  },
  {
    "objectID": "vscode.html#running-tasks",
    "href": "vscode.html#running-tasks",
    "title": "VS Code Extension",
    "section": "Running Tasks",
    "text": "Running Tasks\n\n\n\n\n\n\nThere are many ways to run evaluation tasks within VS Code, including:\n\nCalling inspect eval in the terminal\nCalling eval() directly in a notebook or script\nUsing the Run Task button in the editor\nUsing the Cmd+Shift+U keyboard shortcut (which will run the task currently selected in the active editor).\n\n\n\n\n\n\n\nNo matter how you run a task, when the task is complete the eval log will automatically display to the right of the active editor:\n\nIf you’d rather have the log viewer display in its own window (e.g. to move it to a different monitor) you can drag the Inspect View tab out of VS Code and move it to wherever is most convenient.\nIf you prefer not to have logs shown automatically, there is a setting which can disable this behaviour (search settings for “inspect log”). In that case, you can still view eval logs by clicking on the link at the bottom of the eval results:\n\nSee the article on the Log Viewer for additional details on using it to explore eval results.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>VS Code</span>"
    ]
  },
  {
    "objectID": "vscode.html#debugging-tasks",
    "href": "vscode.html#debugging-tasks",
    "title": "VS Code Extension",
    "section": "Debugging Tasks",
    "text": "Debugging Tasks\n\n\n\n\n\n\n\nThere are two ways to debug tasks within VS Code:\n\n\nUsing the Debug Task button in the editor\nUsing the Cmd+Shift+T keyboard shortcut (which will debug the task currently selected in the active editor).\n\n\n\n\n\n\n\nNote that when debugging a task, the Insepct extension will automatically limit the eval to a single sample (--limit 1 on the command line). If you prefer to debug with many samples, there is a setting that can disable the default behavior (search settings for “inspect debug”).",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>VS Code</span>"
    ]
  },
  {
    "objectID": "vscode.html#activity-bar",
    "href": "vscode.html#activity-bar",
    "title": "VS Code Extension",
    "section": "Activity Bar",
    "text": "Activity Bar\nThe Inspect Activity Bar provides an interface for tuning both global configuration and task CLI arguments. Access the Activity Bar by clicking the Inspect icon on the left side of the VS Code workspace:\n\nThe activity bar has three panels:\n\nConfiguration edits global configuration by reading and writing values from the workspace .env config file (see the documentation on Configuration for more details on .env files).\nTask provides a way to tweak the CLI arguments passed to inspect eval when it is run from the user interface.\nTasks (not shown above) lists all tasks in the current workspace, and can be used to both navigate among tasks as well as run and debug tasks directly.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>VS Code</span>"
    ]
  },
  {
    "objectID": "vscode.html#troubleshooting",
    "href": "vscode.html#troubleshooting",
    "title": "VS Code Extension",
    "section": "Troubleshooting",
    "text": "Troubleshooting\nIf the Inspect extension is not loading into the workspace, you should investigate what version of Python it is discovering as well as whether the inspect-ai package is detected within that Python environment. Use the Output panel (at the bottom of VS Code in the same panel as the Terminal) and select the Inspect output channel using the picker on the right side of the panel:\n\nNote that the Inspect extension will automatically bind to the Python interpreter associated with the current workspace, so you should be sure that the inspect-ai package is installed within that environment. Use the Python: Select Interpreter command to associate a version of Python with your workspace.",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>VS Code</span>"
    ]
  },
  {
    "objectID": "examples.html",
    "href": "examples.html",
    "title": "Examples",
    "section": "",
    "text": "Security Guide\nThe security guide example contains 16 question-answer pairs taken from the security guide dataset published in the OpenAI Evals repository. This eval tests how well models are doing at providing cybersecurity guidance. Here are some examples from the dataset:",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-security-guide",
    "href": "examples.html#sec-security-guide",
    "title": "Examples",
    "section": "",
    "text": "input\ntarget\n\n\n\n\nWhat attributes should I set on cookies for strong security?\nsecure samesite and httponly\n\n\nHow should I store passwords securely for an authentication system database?\nstrong hashing algorithms with salt like Argon2 or bcrypt\n\n\n\n\nSetup\nWe’ll start by importing the functions we need from Inspect and defining a system message that orients the model to its role as a computer security expert.\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import example_dataset\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import generate, system_message\n\nSYSTEM_MESSAGE = \"\"\"\nYou are a computer security expert and you are tasked with\nproviding concise response to the following questions.\nPlease assume that the reader is also well versed in\ncomputer security and provide a short response in a few words.\n\"\"\"\n\n\n\nEval\nDiscerning whether the correct security guidance was provided by the model might provide difficult using only text matching algorithms. Here we use a model to read the response and assess the quality of the answer.\n\n@task\ndef security_guide():\n    return Task(\n        dataset=example_dataset(\"security_guide\"),\n        plan=[system_message(SYSTEM_MESSAGE), generate()],\n        scorer=model_graded_fact(),\n    )\n\nNote that we are using a model_graded_fact() scorer. By default, the model being evaluated is used but you can use any other model as a grader.\nNow we run the evaluation:\ninspect eval security_guide.py",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-hellaswag",
    "href": "examples.html#sec-hellaswag",
    "title": "Examples",
    "section": "HellaSwag",
    "text": "HellaSwag\nHellaSwag is a dataset designed to test commonsense natural language inference (NLI) about physical situations. It includes samples that are adversarially constructed to violate common sense about the physical world, so can be a challenge for some language models.\nFor example, here is one of the questions in the dataset along with its set of possible answer (the correct answer is C):\n\nIn home pet groomers demonstrate how to groom a pet. the person\n\nputs a setting engage on the pets tongue and leash.\nstarts at their butt rise, combing out the hair with a brush from a red.\nis demonstrating how the dog’s hair is trimmed with electric shears at their grooming salon.\ninstalls and interacts with a sleeping pet before moving away.\n\n\n\nSetup\nWe’ll start by importing the functions we need from Inspect, defining a system message, and writing a function to convert dataset records to samples (we need to do this to convert the index-based label in the dataset to a letter).\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import Sample, hf_dataset\nfrom inspect_ai.scorer import answer\nfrom inspect_ai.solver import multiple_choice, system_message\n\nSYSTEM_MESSAGE = \"\"\"\nChoose the most plausible continuation for the story.\n\"\"\"\n\ndef record_to_sample(record):\n    return Sample(\n        input=record[\"ctx\"],\n        target=chr(ord(\"A\") + int(record[\"label\"])),\n        choices=record[\"endings\"],\n        metadata=dict(\n            source_id=record[\"source_id\"]\n        )\n    )\n\nNote that even though we don’t use it for the evaluation, we save the source_id as metadata as a way to reference samples in the underlying dataset.\n\n\nEval\nWe’ll load the dataset from HuggingFace using the hf_dataset() function. We’ll draw data from the validation split, and use the record_to_sample() function to parse the records (we’ll also pass trust=True to indicate that we are okay with Hugging Face executing the dataset loading code provided by hellaswag):\n\n@task\ndef hellaswag():\n   \n    # dataset\n    dataset = hf_dataset(\n        path=\"hellaswag\",\n        split=\"validation\",\n        sample_fields=record_to_sample,\n        trust=True,\n        shuffle=True\n    )\n\n    # define task\n    return Task(\n        dataset=dataset,\n        plan=[\n          system_message(SYSTEM_MESSAGE),\n          multiple_choice()\n        ],\n        scorer=answer(\"letter\"),\n    )\n\nWe use the multiple_choice() solver and as you may have noted we don’t call generate() directly here! This is because multiple_choice() calls generate() internally (it does this so that it can randomly shuffle the order of choices and then map the model output back to the underlying dataset index).\nNow we run the evaluation, limiting the samples read to 50 for development purposes:\ninspect eval hellaswag.py --limit 50",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-theory-of-mind",
    "href": "examples.html#sec-theory-of-mind",
    "title": "Examples",
    "section": "Theory of Mind",
    "text": "Theory of Mind\nThe theory of mind example contains 100 question-answer pairs taken from the ToMi dataset. These are instances of the Sally-Anne test, which assesses the ability of a person to infer false beliefs in others. Here are some samples from the dataset:\n\n\n\n\n\n\n\ninput\ntarget\n\n\n\n\nJackson entered the hall. Chloe entered the hall. The boots is in the bathtub. Jackson exited the hall. Jackson entered the dining_room. Chloe moved the boots to the pantry. Where was the boots at the beginning?\nbathtub\n\n\nHannah entered the patio. Noah entered the patio. The sweater is in the bucket. Noah exited the patio. Ethan entered the study. Ethan exited the study. Hannah moved the sweater to the pantry. Where will Hannah look for the sweater?\npantry\n\n\n\n\nEval\nThis example demonstrates adding parameters to a @task function to create dynamic variants of an evaluation. Here we use a critique parameter to determine whether a self_critique() solver is able to improve on the model’s baseline answer.\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import example_dataset\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import (\n    chain_of_thought, generate, self_critique\n)\n\n@task\ndef theory_of_mind(critique = False):\n    \n    # use self_critique if requested\n    plan = [chain_of_thought(), generate()]\n    if critique:\n        plan.append(self_critique())\n\n    return Task(\n        dataset=example_dataset(\"theory_of_mind\"),\n        plan=plan,\n        scorer=model_graded_fact(),\n    )\n\nNow, let’s run the evaluation and opt-in to self critique using a task arg:\ninspect eval theory_of_mind.py -T critique=true",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-mathematics",
    "href": "examples.html#sec-mathematics",
    "title": "Examples",
    "section": "MATH",
    "text": "MATH\nThe MATH dataset includes 12,500 challenging competition mathematics problems. Each problem in MATH has a full step-by-step solution which can be used to teach models to generate answer derivations and explanations. Here are some samples from the dataset:\n\n\n\n\n\n\n\nQuestion\nAnswer\n\n\n\n\nHow many dollars in interest are earned in two years on a deposit of $10,000 invested at 4.5% and compounded annually? Express your answer to the nearest cent.\n920.25\n\n\nLet \\(p(x)\\) be a monic, quartic polynomial, such that \\(p(1) = 3,\\) \\(p(3) = 11,\\) and \\(p(5) = 27.\\) Find \\(p(-2) + 7p(6)\\)\n1112\n\n\n\n\nSetup\nWe’ll start by importing the functions we need from Inspect and defining a prompt that asks the model to reason step by step and respond with its answer on a line at the end. It also nudges the model not to enclose its answer in \\boxed, a LaTeX command for displaying equations that models often use in math output.\n\nimport re\n\nfrom inspect_ai import Task, task\nfrom inspect_ai.dataset import FieldSpec, csv_dataset\nfrom inspect_ai.model import GenerateConfig, get_model\nfrom inspect_ai.scorer import (\n    CORRECT,\n    INCORRECT,\n    AnswerPattern,\n    Score,\n    Target,\n    accuracy,\n    bootstrap_std,\n    scorer,\n)\nfrom inspect_ai.solver import TaskState, generate, prompt_template\n\n# setup for problem + instructions for providing answer\nPROMPT_TEMPLATE = \"\"\"\nSolve the following math problem step by step. The last line\nof your response should be of the form ANSWER: $ANSWER (without\nquotes) where $ANSWER is the answer to the problem.\n\n{prompt}\n\nRemember to put your answer on its own line after \"ANSWER:\",\nand you do not need to use a \\\\boxed command.\n\"\"\".strip()\n\n\n\nEval\nHere is the basic setup for our eval. We shuffle the dataset so that when we use --limit to develop on smaller slices we get some variety of inputs and results:\n\n@task\ndef math(shuffle=True):\n    return Task(\n        dataset=csv_dataset(\n            csv_file=\"datasets/math_test.csv\",\n            sample_fields=FieldSpec(\n                input=\"Question\", \n                target=\"Answer\"\n            ),\n            shuffle=shuffle,\n        ),\n        plan=[\n            prompt_template(PROMPT_TEMPLATE),\n            generate(),\n        ],\n        scorer=expression_equivalence(),\n        config=GenerateConfig(temperature=0.5),\n    )\n\nThe heart of this eval isn’t in the task definition though, rather it’s in how we grade the output. Math expressions can be logically equivalent but not literally the same. Consequently, we’ll use a model to assess whether the output and the target are logically equivalent. the expression_equivalence() custom scorer implements this:\n\n@scorer(metrics=[accuracy(), bootstrap_std()])\ndef expression_equivalence():\n    async def score(state: TaskState, target: Target):\n        # extract answer\n        match = re.search(AnswerPattern.LINE, state.output.completion)\n        if match:\n            # ask the model to judge equivalence\n            answer = match.group(1)\n            prompt = EQUIVALENCE_TEMPLATE % (\n                {\"expression1\": target.text, \"expression2\": answer}\n            )\n            result = await get_model().generate(prompt)\n\n            # return the score\n            correct = result.completion.lower() == \"yes\"\n            return Score(\n                value=CORRECT if correct else INCORRECT,\n                answer=answer,\n                explanation=state.output.completion,\n            )\n        else:\n            return Score(\n                value=INCORRECT,\n                explanation=\"Answer not found in model output: \"\n                + f\"{state.output.completion}\",\n            )\n\n    return score\n\nWe are making a separate call to the model to assess equivalence. We prompt for this using an EQUIVALENCE_TEMPLATE. Here’s a general flavor for how that template looks (there are more examples in the real template):\nEQUIVALENCE_TEMPLATE = r\"\"\"\nLook at the following two expressions (answers to a math problem)\nand judge whether they are equivalent. Only perform trivial \nsimplifications\n\nExamples:\n\n    Expression 1: $2x+3$\n    Expression 2: $3+2x$\n\nYes\n\n    Expression 1: $x^2+2x+1$\n    Expression 2: $y^2+2y+1$\n\nNo\n\n    Expression 1: 72 degrees\n    Expression 2: 72\n\nYes\n(give benefit of the doubt to units)\n---\n\nYOUR TASK\n\nRespond with only \"Yes\" or \"No\" (without quotes). Do not include\na rationale.\n\n    Expression 1: %(expression1)s\n    Expression 2: %(expression2)s\n\"\"\".strip()\nNow we run the evaluation, limiting it to 500 problems (as there are over 12,000 in the dataset):\n$ inspect eval arc.py --limit 500\nThis will draw 500 random samples from the dataset (because we defined shuffle=True in our call to load the dataset). The task lets you override this with a task parameter (e.g. in case you wanted to evaluate a specific sample or range of samples):\n$ inspect eval arc.py --limit 100-200 -T shuffle=false",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-biology-qa",
    "href": "examples.html#sec-biology-qa",
    "title": "Examples",
    "section": "Biology QA",
    "text": "Biology QA\nThe biology_qa example contains 20 advanced biology questions. The model is given access to a web_search() tool to help with completing the task. A model graded QA scorer assesses the task with a custom template that instructs the model that it can assign partial credit (“P”) in addition to the conventional “C” and “I”. Here are some samples from the dataset:\n\n\n\nquestion\nanswer\n\n\n\n\nHow many species are estimated to live on Earth?\n8.7 million\n\n\nA DNA molecule is described as being what shape?\nDouble helix\n\n\n\nThe web_search() tool uses Google Programmable Search Engine. If you want to run the examples you will need to setup your own Google Programmable Search Engine and also enable the Programmable Search Element Paid API. Then, ensure that the following environment variables are defined:\n\nGOOGLE_CSE_ID — Google Custom Search Engine ID\nGOOGLE_CSE_API_KEY — Google API key used to enable the Search API\n\n\nEval\nNote that in the sample records above the dataset columns are not input and target so we’ll use a custom FieldSpec in our call to example_dataset. We also call the use_tools() function, passing web_search() as a tool—this gives the model access to a Google Search API that can be used to fill in background knowledge or specific facts. We use a model_graded_qa() scorer to more reliably score longer form model output.\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import FieldSpec, example_dataset\nfrom inspect_ai.scorer import model_graded_qa\nfrom inspect_ai.solver import generate, use_tools, web_search\n\n@task\ndef biology_qa() -&gt; Task:\n    return Task(\n        dataset=example_dataset(\n            name=\"biology_qa\",\n            sample_fields=FieldSpec(\n                input=\"question\", \n                target=\"answer\"\n            ),\n        ),\n        plan=[use_tools(web_search()), generate()],\n        scorer=model_graded_qa(),\n    )\n\nNow we run the evaluation (be sure to have set the OPENAI_API_KEY environment variable before running). See the docs on Models for information on using other model providers.\ninspect eval biology_qa.py\nNote that you may not be able to run this example as it requires that you setup a Google Custom Search Engine and provide the GOOGLE_API_KEY and GOOGLE_CSE_ID environment variables.\nThe web_search() tool uses a model to summarize search results. By default it will use the same model as the one being evaluated, however you can choose a different model like this:\nplan=[\n    use_tools(\n        web_search(model=\"anthropic/claude-3-opus-20240229\")\n    ), \n    generate()\n],",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-arc",
    "href": "examples.html#sec-arc",
    "title": "Examples",
    "section": "ARC",
    "text": "ARC\nThe ARC dataset consists of 7,787 science exam questions drawn from a variety of sources, including science questions provided under license by a research partner affiliated with AI2. These are text-only, English language exam questions that span several grade levels as indicated in the files. Each question has a multiple choice structure (typically 4 answer options). The questions are sorted into a Challenge Set of 2,590 “hard” questions (those that both a retrieval and a co-occurrence method fail to answer correctly) and an Easy Set of 5,197 questions. Here are some samples from the dataset:\n\n\n\n\n\n\n\n\nquestion\nchoices\nanswerKey\n\n\n\n\nGeorge wants to warm his hands quickly by rubbing them. Which skin surface will produce the most heat?\n{ “text”: [ “dry palms”, “wet palms”, “palms covered with oil”, “palms covered with lotion” ], “label”: [ “A”, “B”, “C”, “D” ] }\nA\n\n\nA toothpaste commercial states that a brand of toothpaste has a higher concentration of fluoride than any other toothpaste available. The commercial is most likely inferring that the advertised toothpaste\n{ “text”: [ “has a pleasant flavor.”, “is recommended by dentists.”, “promotes good dental hygiene.”, “is the most expensive brand sold.” ], “label”: [ “A”, “B”, “C”, “D” ] }\nC\n\n\n\n\nSetup\nWe’ll start by importing what we need from Inspect and writing a record_to_sample() function to convert raw records to samples (note that the choices and labels are encoded in JSON within the choices field so need some special pre-processing).\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import Sample, hf_dataset\nfrom inspect_ai.scorer import answer\nfrom inspect_ai.solver import multiple_choice, system_message\n\ndef record_to_sample(record):\n  # read the labels and text\n  choices = record[\"choices\"]\n  choices = dict(zip(choices[\"label\"], choices[\"text\"]))\n\n  # determine the target then normalize to letter\n  answerKey = record[\"answerKey\"]\n  target = list(choices.keys()).index(answerKey)\n  target = chr(ord(\"A\") + int(target))\n\n  # return sample\n  return Sample(\n    input=record[\"question\"],\n    choices=list(choices.values()),\n    target=target\n  )\n\nSince the label and answer could be encoded using either letters or numeric indexes, we lookup\n\n\nEval\nThe ARC dataset has two subsets (ARC-Easy and ARC-Challenge). We’ll create a shared task function that can be used to run either, and then export two @task decorated functions so that they can be run all together or in isolation.\n\ndef arc_task(dataset_name):\n   return Task(\n     dataset=hf_dataset(\n       path=\"allenai/ai2_arc\",\n       name=dataset_name,\n       split=\"test\",\n       sample_fields=record_to_sample\n     ),\n     plan = multiple_choice(),\n     scorer = answer(\"letter\")\n   )\n   \n@task\ndef easy():\n  return arc_task(\"ARC-Easy\")\n\n@task\ndef challenge():\n  return arc_task(\"ARC-Challenge\")\n\nWe use the multiple_choice() solver and as you may have noted we don’t call generate() directly here! This is because multiple_choice() calls generate() internally (it does this so that it can randomly shuffle the order of choices and then map the model output back to the underlying dataset index).\nWe can run either all tasks or individual tasks as follows:\ninspect eval arc.py      \ninspect eval arc.py@easy\ninspect eval arc.py@challenge",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-tool-use",
    "href": "examples.html#sec-tool-use",
    "title": "Examples",
    "section": "Tool Use",
    "text": "Tool Use\nThis example illustrates how to define and use tools with model evaluations. Tools are Python functions that you provide for the model to call for assistance with various tasks (e.g. looking up information). Note that tools are actually executed on the client system, not on the system where the model is running.\nNote that tool use is not supported for every model provider. Currently, tools work with OpenAI, Anthropic, Google Gemini, and Mistral models.\nIf you want to use tools in your evals it’s worth taking some time to learn how to provide good tool definitions. Here are some resources you may find helpful:\n\nFunction Calling with LLMs\nBest Practices for Tool Definitions\n\n\nAddition\nWe’ll start with a simple tool that adds two numbers. We use the @tool decorator to register it with the system, and we provide a documentation comment (including argument types) that is used to provide details to the model about the tool:\n\nfrom inspect_ai import Task, eval, task\nfrom inspect_ai.dataset import Sample\nfrom inspect_ai.scorer import includes, match\nfrom inspect_ai.solver import (\n    generate, system_message, use_tools\n)\nfrom inspect_ai.tool import tool\nfrom inspect_ai.util import subprocess\n\n@tool(prompt=\"\"\"\n    If you are given a math problem of any kind,\n    please use the add tool to compute the result.\n    \"\"\"\n)\ndef add():\n    async def execute(x: int, y: int):\n        \"\"\"\n        Tool for adding two numbers.\n\n        Args:\n            x (int): First number to add.\n            y (int): Second number to add.\n\n        Returns:\n            The sum of the two numbers.\n        \"\"\"\n        return x + y\n\n    return execute\n\nNote the prompt argument passed to the @tool decorator. This prompt is intended to help the model reason about when to use the tool, and is automatically added to the system prompt.\nNow that we’ve defined the tool, we can use it in an evaluation by passing it to the use_tools() function.\n\n@task\ndef addition_problem():\n    return Task(\n        dataset=[Sample(\n            input=\"What is 1 + 1?\",\n            target=[\"2\", \"2.0\"]\n        )],\n        plan=[use_tools(add()), generate()],\n        scorer=match(numeric=True),\n    )\n\nWe run the eval with:\ninspect eval addition_problem.py",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#file-listing",
    "href": "examples.html#file-listing",
    "title": "Examples",
    "section": "File Listing",
    "text": "File Listing\nThe next examples demonstrates how to define a tool that calls an external process.\nWhen working with subprocesses its important to make sure that they don’t block the rest of the work in Inspect (so they should be invoked with async) and that you don’t run too many of them in parallel (which could overwhelm local compute resources).\nTo assist with this, Inspect provides the subprocess() function. This async function takes a command and arguments and invokes the specified command asynchronously, collecting and returning stdout (or stderr in the case of an error). The subprocess() function also automatically limits concurrent child processes to the number of CPUs on your system (os.cpu_count()).\nHere’s an example of using the subprocess() function to create a list_files() tool (note that we imported the subprocess() function from the inspect_ai.util module above):\n\n@tool(\n    prompt=\"\"\"\n    If you are asked to list the files in a directory you\n    should call the list_files function to list the files.\n    \"\"\"\n)\ndef list_files():\n    async def execute(dir: str):\n        \"\"\"List the files in a directory.\n\n        Args:\n            dir (str): Directory\n\n        Returns:\n            File listing of the directory\n        \"\"\"\n        result = await subprocess([\"ls\", dir])\n        if result.success:\n            return result.stdout\n        else:\n            raise ToolError(result.stderr)\n\n    return execute\n\nHere’s how we might use that tool in an evaluation:\n\nSYSTEM_MESSAGE = \"\"\"\nPlease answer exactly Yes or No with no additional words.\n\"\"\"\n\n@task\ndef bash():\n\n    dataset = [Sample(\n        input=(\n            \"Please list the files in the /usr/bin directory. \"\n            + \"Is there a file named 'python3' in the directory?\"\n        ),\n        target=[\"Yes\"],\n    )]\n\n    return Task(\n        dataset=dataset,\n        plan=[\n            system_message(SYSTEM_MESSAGE),\n            use_tools(list_files()),\n            generate(),\n        ],\n        scorer=includes(),\n    )\n\nNow we run the evaluation:\ninspect eval bash.py",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "examples.html#sec-gsm8k",
    "href": "examples.html#sec-gsm8k",
    "title": "Examples",
    "section": "GSM8K",
    "text": "GSM8K\nGSM8K (Grade School Math 8K) is a dataset of 8.5K high quality linguistically diverse grade school math word problems. The dataset was created to support the task of question answering on basic mathematical problems that require multi-step reasoning. Here are some samples from the dataset:\n\n\n\n\n\n\n\nquestion\nanswer\n\n\n\n\nJames writes a 3-page letter to 2 different friends twice a week. How many pages does he write a year?\nHe writes each friend 3*2=&lt;&lt;3*2=6&gt;&gt;6 pages a week So he writes 6*2=&lt;&lt;6*2=12&gt;&gt;12 pages every week That means he writes 12*52=&lt;&lt;12*52=624&gt;&gt;624 pages a year #### 624\n\n\nWeng earns $12 an hour for babysitting. Yesterday, she just did 50 minutes of babysitting. How much did she earn?\nWeng earns 12/60 = $&lt;&lt;12/60=0.2&gt;&gt;0.2 per minute. Working 50 minutes, she earned 0.2 x 50 = $&lt;&lt;0.2*50=10&gt;&gt;10. #### 10\n\n\n\nNote that the final numeric answers are contained at the end of the answer field after the #### delimiter.\n\nSetup\nWe’ll start by importing what we need from Inspect and writing a couple of data handling functions:\n\nrecord_to_sample() to convert raw records to samples. Note that we need a function rather than just mapping field names with a FieldSpec because the answer field in the dataset needs to be divided into reasoning and the actual answer (which appears at the very end after ####).\nsample_to_fewshot() to generate fewshot examples from samples.\n\n\nfrom inspect_ai import Task, task\nfrom inspect_ai.dataset import Sample, hf_dataset\nfrom inspect_ai.scorer import match\nfrom inspect_ai.solver import (\n    generate, prompt_template, system_message\n)\n\n\ndef record_to_sample(record):\n    DELIM = \"####\"\n    input = record[\"question\"]\n    answer = record[\"answer\"].split(DELIM)\n    target = answer.pop().strip()\n    reasoning = DELIM.join(answer)\n    return Sample(\n        input=input, \n        target=target, \n        metadata={\"reasoning\": reasoning.strip()}\n    )\n\n\ndef sample_to_fewshot(sample):\n    return (\n        f\"{sample.input}\\n\\nReasoning:\\n\"\n        + f\"{sample.metadata['reasoning']}\\n\\n\"\n        + f\"ANSWER: {sample.target}\"\n    )\n\nNote that we save the “reasoning” part of the answer in metadata—we do this so that we can use it to compose the fewshot prompt (as illustrated in sample_to_fewshot()).\nHere’s the prompt we’ll used to elicit a chain of thought answer in the right format:\n# setup for problem + instructions for providing answer\nMATH_PROMPT_TEMPLATE = \"\"\"\nSolve the following math problem step by step. The last line of your\nresponse should be of the form \"ANSWER: $ANSWER\" (without quotes) \nwhere $ANSWER is the answer to the problem.\n\n{prompt}\n\nRemember to put your answer on its own line at the end in the form\n\"ANSWER: $ANSWER\" (without quotes) where $ANSWER is the answer to \nthe problem, and you do not need to use a \\\\boxed command.\n\nReasoning:\n\"\"\".strip()\n\n\nEval\nWe’ll load the dataset from HuggingFace using the hf_dataset() function. By default we use 10 fewshot examples, but the fewshot task arg can be used to turn this up, down, or off. The fewshot_seed is provided for stability of fewshot examples across runs.\n\n@task\ndef gsm8k(fewshot=10, fewshot_seed=42):\n    # build plan dynamically (may or may not be doing fewshot)\n    plan = [prompt_template(MATH_PROMPT_TEMPLATE), generate()]\n    if fewshot:\n        fewshots = hf_dataset(\n            path=\"gsm8k\",\n            data_dir=\"main\",\n            split=\"train\",\n            sample_fields=record_to_sample,\n            shuffle=True,\n            seed=fewshot_seed,\n            limit=fewshot,\n        )\n        plan.insert(\n            0,\n            system_message(\n                \"\\n\\n\".join([sample_to_fewshot(sample) for sample in fewshots])\n            ),\n        )\n\n    # define task\n    return Task(\n        dataset=hf_dataset(\n            path=\"gsm8k\",\n            data_dir=\"main\",\n            split=\"test\",\n            sample_fields=record_to_sample,\n        ),\n        plan=plan,\n        scorer=match(numeric=True),\n    )\n\nWe instruct the match() scorer to look for numeric matches at the end of the output. Passing numeric=True tells match() that it should disregard punctuation used in numbers (e.g. $, ,, or . at the end) when making comparisons.\nNow we run the evaluation, limiting the number of samples to 100 for development purposes:\ninspect eval gsm8k.py --limit 100",
    "crumbs": [
      "Basics",
      "<span class='chapter-number'>5</span>  <span class='chapter-title'>Examples</span>"
    ]
  },
  {
    "objectID": "solvers.html",
    "href": "solvers.html",
    "title": "Solvers",
    "section": "",
    "text": "Overview\nSolvers are the heart of Inspect evaluations and can serve a wide variety of purposes, including:\nHere’s an example task definition that composes a few standard solvers into a plan:\nTypically, a call to generate() is included in the list of solvers (this solver is just a simple call to the model). You can also create a more sophisticated solver that calls generate() internally, perhaps even more than once (this is often required for more complex evaluations). Next, we’ll describe how solvers operate on task states to do their work.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#overview",
    "href": "solvers.html#overview",
    "title": "Solvers",
    "section": "",
    "text": "Providing system prompts\nPrompt engineering (e.g. chain of thought)\nModel generation\nSelf critique\nMulti-turn dialog\nRunning an agent scaffold\n\n\n@task\ndef theory_of_mind():\n    return Task(\n        dataset=json_dataset(\"theory_of_mind.jsonl\"),\n        plan=[\n            system_message(\"system.txt\"),\n            chain_of_thought(),\n            generate(),\n            self_critique()\n        ],\n        scorer=model_graded_fact(),\n    )\n\n\n\n\n\n\n\nThe concept of using solvers and task states for evals was originally introduced in OpenAI Evals. Inspect solvers are an evolution of this core design.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#task-states",
    "href": "solvers.html#task-states",
    "title": "Solvers",
    "section": "Task States",
    "text": "Task States\nBefore we get into the specifics of how solvers work, we should describe TaskState, which is the fundamental data structure they act upon. A TaskState consists principally of chat history (derived from input and then extended by model interactions) and model output:\nclass TaskState:\n    messages: list[ChatMessage],\n    output: ModelOutput\n\n\n\n\n\n\nNote that the TaskState definition above is simplified: there are other fields in a TaskState but we’re excluding them here for clarity.\n\n\n\nA prompt engineering solver will modify the content of messages. A model generation solver will call the model, append an assistant message, and set the output (a multi-turn dialog solver might do this in a loop).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#solver-function",
    "href": "solvers.html#solver-function",
    "title": "Solvers",
    "section": "Solver Function",
    "text": "Solver Function\nWe’ve covered the role of solvers in the system, but what exactly are solvers technically? A solver is a Python function that takes a TaskState and generate function, and then transforms and returns the TaskState (the generate function may or may not be called depending on the solver).\nasync def solve(state: TaskState, generate: Generate):\n    # do something useful with state (possibly\n    # calling generate for more advanced solvers)\n    # then return the state\n    return state\nThe generate function passed to solvers is a convenience function that takes a TaskState, calls the model with it, appends the assistant message, and sets the model output. This is never used by prompt engineering solvers and nearly always used by more complex solvers that want to have multiple model interactions.\nHere are what some of the built-in solvers do with the TaskState:\n\nThe system_message() solver inserts a system message into the chat history.\nThe chain_of_thought() solver takes the original user prompt and re-writes it to ask the model to use chain of thought reasoning to come up with its answer.\nThe generate() solver just calls the generate function on the state. In fact, this is the full source code for the generate() solver:\nasync def solve(state: TaskState, generate: Generate):\n    return await generate(state)\nThe self_critique() solver takes the ModelOutput and then sends it to another model for critique. It then replays this critique back within the messages stream and re-calls generate to get a refined answer.\n\nYou can also imagine solvers that call other models to help come up with a better prompt, or solvers that implement a multi-turn dialog. Anything you can imagine is possible.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#built-in-solvers",
    "href": "solvers.html#built-in-solvers",
    "title": "Solvers",
    "section": "Built-In Solvers",
    "text": "Built-In Solvers\nInspect has a number of built-in solvers, each of which can be customised in some fashion. Built in solvers can be imported from the inspect_ai.solver module. Below is a summary of these solvers. There is not (yet) reference documentation on these functions so the best way to learn about how they can be customised, etc. is to use the Go to Definition command in your source editor.\n\nsystem_message()\nPrepend role=“system” message to the list of messages (will follow any other system messages it finds in the message stream).\nprompt_template()\nModify the user prompt by substituting the current prompt into the {prompt} placeholder within the specified template, as well as any other custom named placeholder passed in params.\nchain_of_thought()\nStandard chain of thought template with {prompt} substitution variable. Asks the model to provide the final answer on a line by itself at the end for easier scoring.\ngenerate()\nAs illustrated above, just a simple call to generate(state). This is the default solver if no plan is specified.\nmultiple_choice()\nA solver which presents A,B,C,D style choices from input samples (in a random order), calls generate() to yield model output, then maps the answer back to the correct index for scoring. Note that you don’t need to call generate() separately when using this solver.\nself_critique()\nPrompts the model to critique the results of a previous call to generate() (note that this need not be the same model as they one you are evaluating—use the model parameter to choose another model). Makes use of {question} and {completion} template variables.\nuse_tools()\nDefine the set tools available for use by the model during generate().\n\n\nMultiple Choice\nHere is the declaration for the multiple_choice() solver:\ndef multiple_choice(\n    multiple_correct: bool = False,\n    shuffle: bool | Random = False,\n    template: str | None = None,\n) -&gt; Solver:\nBy default, multiple choice questions have a single correct answer. Set multiple_correct=True if your target has defined multiple correct answers (for example, a target of [\"B\", \"C\"]). In this case the model is prompted to provide one or more answers, and the sample is scored correct only if each of these answers are provided.\nIf you specify shuffle=True, then the order of the answers presented to the model will be randomised (this may or may not affect results, depending on the nature of the questions and the model being evaluated).\nUse template to provide an alternate prompt template (note that if you do this your template should handle prompting for multiple_correct directly if required).\nWhen using the multiple_choice() solver you should always pair it with the choice() scorer.\n\n\nSelf Critique\nHere is the declaration for the self_critique() solver:\ndef self_critique(\n    critique_template: str | None = None,\n    completion_template: str | None = None,\n    model: str | Model | None = None,\n) -&gt; Solver:\nThere are two templates which correspond to the one used to solicit critique and the one used to play that critique back for a refined answer (default templates are provided for both).\nYou will likely want to experiment with using a distinct model for generating critiques (by default the model being evaluated is used).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#custom-solvers",
    "href": "solvers.html#custom-solvers",
    "title": "Solvers",
    "section": "Custom Solvers",
    "text": "Custom Solvers\nIn this section we’ll take a look at the source code for a couple of the built in solvers as a jumping off point for implementing your own solvers. A solver is an implementation of the Solver protocol (a function that transforms a TaskState):\nasync def solve(state: TaskState, generate: Generate) -&gt; TaskState:\n    # do something useful with state, possibly calling generate()\n    # for more advanced solvers\n    return state\nTypically solvers can be customised with parameters (e.g. template for prompt engineering solvers). This means that a Solver is actually a function which returns the solve() function referenced above (this will become more clear in the examples below).\n\nTask States\nBefore presenting the examples we’ll take a more in-depth look at the TaskState class. Task states consist of both lower level data members (e.g. messages, output) as well as a number of convenience properties. The core members of TaskState that are modified by solvers are messages / user_prompt and output:\n\n\n\n\n\n\n\n\nMember\nType\nDescription\n\n\n\n\nmessages\nlist[ChatMessage]\nChat conversation history for sample. It is automatically appended to by the generate() solver, and is often manipulated by other solvers (e.g. for prompt engineering or elicitation).\n\n\nuser_prompt\nChatMessageUser\nConvenience property for accessing the first user message in the message history (commonly used for prompt engineering).\n\n\noutput\nModelOutput\nThe ‘final’ model output once we’ve completed all solving. This field is automatically updated with the last “assistant” message by the generate() solver.\n\n\n\n\n\n\n\n\n\nNote that the generate() solver automatically updates both the messages and output fields. For very simple evaluations modifying the user_prompt and then calling generate() encompasses all of the required interaction with TaskState.\n\n\n\nThere are two additional fields that solvers might modify (but they are typically for more advanced use cases):\n\n\n\n\n\n\n\n\nMember\nType\nDescription\n\n\n\n\nmetadata\ndict\nOriginal metadata from Sample, as well as any other custom metadata that solvers choose to write (typically used to coordinate between solvers and/or for custom logging).\n\n\ncompleted\nbool\nSolvers can set completed = True to cause the task to exit the plan immediately.\n\n\n\nSometimes its import to have access to the original prompt input for the task (as other solvers may have re-written or even removed it entirely). This is available using the input and input_text properties:\n\n\n\n\n\n\n\n\nMember\nType\nDescription\n\n\n\n\ninput\nstr | list[ChatMessage]\nOriginal Sample input.\n\n\ninput_text\nstr\nConvenience function for accessing the initial input from the Sample as a string.\n\n\n\nThere are several other fields used to provide contextual data from either the task sample or evaluation:\n\n\n\n\n\n\n\n\nMember\nType\nDescription\n\n\n\n\nsample_id\nint | str\nUnique ID for sample.\n\n\nepoch\nint\nEpoch for sample.\n\n\nchoices\nlist[str] | None\nChoices from sample (used only in multiple-choice evals).\n\n\nmodel\nModelName\nName of model currently being evaluated.\n\n\n\nFinally, task states also include available tools as well as guidance for the model on which tools to use (if you haven’t yet encountered the concept of tool use in language models, don’t worry about understanding these fields, the Tools article provides a more in-depth treatment):\n\n\n\n\n\n\n\n\nMember\nType\nDescription\n\n\n\n\ntools\nlist[Tool]\nTools available to the model\n\n\ntool_choice\nToolChoice\nTool choice directive.\n\n\n\nThese fields are typically modified via the use_tools() solver, but they can also be modified directly for more advanced use cases.\n\n\nExample: Prompt Template\nHere’s the code for the prompt_template() solver:\n@solver\ndef prompt_template(template: str, **params: dict[str, Any]):\n\n    # determine the prompt template\n    prompt_template = resource(template)\n\n    async def solve(state: TaskState, generate: Generate) -&gt; TaskState:\n        # its possible the messages payload has no user prompt\n        # so only modify the prompt if there is one\n        if state.user_prompt:\n            state.user_prompt.text = prompt_template.format(\n                prompt=state.user_prompt.text, **params\n            )\n        return state\n\n    return solve\nA few things to note about this implementation:\n\nThe function applies the @solver decorator—this registers the Solver with Inspect, making it possible to capture its name and parameters for logging, as well as make it callable from a configuration file (e.g. a YAML specification of an eval).\nThe solve() function is declared as async. This is so that it can participate in Inspect’s optimised scheduling for expensive model generation calls (this solver doesn’t call generate() but others will).\nThe resource() function is used to read the specified template. This function accepts a string, file, or URL as its argument, and then returns a string with the contents of the resource.\nWe make use of the user_prompt property on the TaskState. This is a convenience property for locating the first role=\"user\" message (otherwise you might need to skip over system messages, etc). Since this is a string templating solver, we use the state.user_prompt.text property (so we are dealing with prompt as a string, recall that it can also be a list of messages).\n\n\n\nExample: Self Critique\nHere’s the code for the self_critique() solver:\nDEFAULT_CRITIQUE_TEMPLATE = r\"\"\"\nGiven the following question and answer, please critique the answer.\nA good answer comprehensively answers the question and NEVER refuses\nto answer. If the answer is already correct do not provide critique\n- simply respond 'The original answer is fully correct'.\n\n[BEGIN DATA]\n***\n[Question]: {question}\n***\n[Answer]: {completion}\n***\n[END DATA]\n\nCritique: \"\"\"\n\nDEFAULT_CRITIQUE_COMPLETION_TEMPLATE = r\"\"\"\nGiven the following question, initial answer and critique please\ngenerate an improved answer to the question:\n\n[BEGIN DATA]\n***\n[Question]: {question}\n***\n[Answer]: {completion}\n***\n[Critique]: {critique}\n***\n[END DATA]\n\nIf the original answer is already correct, just repeat the\noriginal answer exactly. You should just provide your answer to\nthe question in exactly this format:\n\nAnswer: &lt;your answer&gt; \"\"\"\n\n@solver\ndef self_critique(\n    critique_template: str | None = None,\n    completion_template: str | None = None,\n    model: str | Model | None = None,\n) -&gt; Solver:\n    # resolve templates\n    critique_template = resource(\n        critique_template or DEFAULT_CRITIQUE_TEMPLATE\n    )\n    completion_template = resource(\n        completion_template or DEFAULT_CRITIQUE_COMPLETION_TEMPLATE\n    )\n\n    # resolve critique model\n    model = get_model(model)\n\n    async def solve(state: TaskState, generate: Generate) -&gt; TaskState:\n        # run critique\n        critique = await model.generate(\n            critique_template.format(\n                question=state.input_text,\n                completion=state.output.completion,\n            )\n        )\n\n        # add the critique as a user message\n        state.messages.append(\n            ChatMessageUser(\n                content=completion_template.format(\n                    question=state.input_text,\n                    completion=state.output.completion,\n                    critique=critique.completion,\n                ),\n            )\n        )\n\n        # regenerate\n        return await generate(state)\n\n    return solve\nNote that calls to generate() (for both the critique model and the model being evaluated) are called with await—this is critical to ensure that the solver participates correctly in the scheduling of generation work.\n\n\nConcurrency\nWhen creating custom solvers, it’s critical that you understand Inspect’s concurrency model. More specifically, if your solver is doing non-trivial work (e.g. calling REST APIs, executing external processes, etc.) please review Parallelism for a more in depth discussion.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#early-termination",
    "href": "solvers.html#early-termination",
    "title": "Solvers",
    "section": "Early Termination",
    "text": "Early Termination\nIn some cases a solver has the context available to request an early termination of the plan (i.e. don’t call the rest of the solvers). In this case, setting the TaskState.completed field will result in forgoing remaining solvers in the plan. For example, here’s a simple solver that terminates the plan early:\n@solver\ndef complete_task():\n    async def solve(state: TaskState, generate: Generate):\n        state.completed = True\n        return state\n\n    return solve\nEarly termination might also occur if you specify the max_messages option and the conversation exceeds that limit:\n# could terminate early\neval(my_task, max_messages = 10)\nIn cases of early termination, you might have one final Solver that you want to make sure to always run (e.g. to synthesize an output for an early termination or to cleanup resources allocated for an evaluation). In this case, use a Plan object with a finish Solver:\nTask(\n    dataset=json_dataset(\"data.json\"),\n    plan = Plan(\n        steps = [...],\n        finish = finish_up()\n    ),\n    scorer = model_graded_fact()\n)\nIn this example the finish_up() solver will always be called even if the plan doesn’t run all of its steps.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "solvers.html#plan-cleanup",
    "href": "solvers.html#plan-cleanup",
    "title": "Solvers",
    "section": "Plan Cleanup",
    "text": "Plan Cleanup\nIf your solvers allocate resources (for example, run a Docker container or mount a drive), you will want to make sure that these resources are cleaned up even in the case of an error occurring during the evaluation. To arrange for this, use a Plan object with a cleanup function:\n\nasync def cleanup(state):\n    # cleanup resources\n    ...\n\nTask(\n    dataset=json_dataset(\"data.json\"),\n    plan = Plan(\n        steps = [...],\n        cleanup = cleanup\n    ),\n    scorer = model_graded_fact()\n)\nIn this example the cleanup() function will always be called even if an error occurs during evaluation. Note that the cleanup handler must be declared as an async function.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Solvers</span>"
    ]
  },
  {
    "objectID": "tools.html",
    "href": "tools.html",
    "title": "Tools",
    "section": "",
    "text": "Overview\nMany models now have the ability to interact with client-side Python functions in order to expand their capabilities. This enables you to equip models with your own set of custom tools so they can perform a wider variety of tasks.\nInspect natively supports registering Python functions as tools and providing these tools to models that support them (currently OpenAI, Claude 3, Google Gemini, and Mistral). Inspect also includes one built-in tool (web search).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "tools.html#overview",
    "href": "tools.html#overview",
    "title": "Tools",
    "section": "",
    "text": "Tools and Agents\n\n\n\nOne application of tools is to run them within an agent scaffold that pursues an objective over multiple interactions with a model. The scaffold uses the model to help make decisions about which tools to use and when, and orchestrates calls to the model to use the tools. This is covered in more depth in the Agents section.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "tools.html#tool-basics",
    "href": "tools.html#tool-basics",
    "title": "Tools",
    "section": "Tool Basics",
    "text": "Tool Basics\nTo demonstrate the use of tools, we’ll define a simple tool that adds two numbers. We use the @tool decorator to register it with the system, and we provide a documentation comment (including argument types) that is used to provide details to the model about the tool:\n@tool(prompt=\"\"\"\n    If you are given a math problem of any kind,\n    please use the add tool to compute the result.\"\"\"\n)\ndef add():\n    async def execute(x: int, y: int):\n        \"\"\"\n        Tool for adding two numbers.\n\n        Args:\n            x (int): First number to add.\n            y (int): Second number to add.\n\n        Returns:\n            The sum of the two numbers.\n        \"\"\"\n        return x + y\n\n    return execute\nWe can use this tool in an evaluation by passing it to the use_tools() Solver:\n@task\ndef addition_problem():\n    return Task(\n        dataset=[Sample(input=\"What is 1 + 1?\", target=[\"2\"])],\n        plan=[\n            use_tools(add()), \n            generate()\n        ],\n        scorer=match(numeric=True),\n    )\nNote that this tool doesn’t make network requests or do heavy computation, so is fine to run as inline Python code. If your tool does do more elaborate things, you’ll want to make sure it plays well with Inspect’s concurrency scheme. For network requests, this amounts to using async HTTP calls with httpx. For heavier computation, tools should use subprocesses as described in the next section.\n\n\n\n\n\n\nNote that when using tools with models, the models do not call the Python function directly. Rather, the model generates a structured request which includes function parameters, and then Inspect calls the function and returns the result to the model.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "tools.html#tool-errors",
    "href": "tools.html#tool-errors",
    "title": "Tools",
    "section": "Tool Errors",
    "text": "Tool Errors\nIf an exception occurs during tool execution, it will by default result in a runtime error that exits the evaluation task. This is often the correct behaviour (as a malfunctioning tool invalidates the assumptions of the eval), however sometimes there are “expected” errors. For example, if you give the model a tool to execute bash or python code, it may submit invalid code. In this case you want to report the error to the model and have it adapt.\nYou can report errors to the model from tools by raising a ToolError exception. These exceptions will not terminate the eval, but rather will report back to the model and that an error has occurred and allow it to recover. For example, here is the code for the built in bash() tool:\n@tool(prompt=\"Use the bash tool for shell commands.\")\ndef bash(timeout: int | None = None) -&gt; Tool:\n   \n    async def execute(cmd: str) -&gt; str:\n        \"\"\"\n        Execute a bash command.\n\n        Args:\n          cmd (str): The bash command to execute.\n\n        Returns:\n          The output of the command.\n        \"\"\"\n        result = await tool_environment().exec(\n            cmd=[\"bash\", \"-c\", cmd], \n            timeout=timeout\n        )\n        if result.success:\n            return result.stdout\n        else:\n            raise ToolError(result.stderr)\n\n    return execute\nWe expect that some bash commands will result in an error status, so we explicitly raise ToolError rather than a normal exception.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "tools.html#tool-choice",
    "href": "tools.html#tool-choice",
    "title": "Tools",
    "section": "Tool Choice",
    "text": "Tool Choice\nBy default models will use a tool if they think it’s appropriate for the given task. You can override this behaviour using the tool_choice parameter of the use_tools() Solver. For example:\n# let the model decide whether to use the tool\nuse_tools(addition(), tool_choice=\"auto\")\n\n# force the use of a tool\nuse_tools(addition(), tool_choice=ToolFunction(name=\"addition\"))\n\n# prevent use of tools\nuse_tools(addition(), tool_choice=\"none\")\nThe last form (tool_choice=\"none\") would typically be used to turn off tool usage after an initial generation where the tool used. For example:\nplan = [\n  use_tools(addition(), tool_choice=ToolFunction(name=\"addition\")),\n  generate(),\n  follow_up_prompt(),\n  use_tools(tool_choice=\"none\"),\n  generate()\n]",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "tools.html#built-in-tools",
    "href": "tools.html#built-in-tools",
    "title": "Tools",
    "section": "Built-In Tools",
    "text": "Built-In Tools\nInspect has several built-in tools, including:\n\nweb_search(), which uses the Google Search API to execute and summarise web searches.\nbash() and python(), for executing arbitrary shell and Python code.\n\n\nWeb Search\nThe web_search() tool provides models the ability to enhance their context window by performing a search. By default web searches retrieve 10 results from a provider, uses a model to determine if the contents is relevant then returns the top 3 relevant search results to the main model. Here is the definition of the web_search() function:\ndef web_search(\n    provider: Literal[\"google\"] = \"google\",\n    num_results: int = 3,\n    max_provider_calls: int = 3,\n    max_connections: int = 10,\n    model: str | Model | None = None,\n) -&gt; Tool:\n    ...\nYou can use the web_search() tool in a plan like this:\nplan=[\n    use_tools(web_search()), \n    generate()\n],\nWeb search options include:\n\nprovider—Web search provider (currently only Google is supported, see below for instructions on setup and configuration for Google).\nnum_results—How many search results to return to the main model (defaults to 5).\nmax_provider_calls—Number of times to retrieve more links from the search provider in case previous ones were irrelevant (defaults to 3).\nmax_connections—Maximum number of concurrent connections to the search API provider (defaults to 10).\nmodel—Model to use to determine if search results are relevant (defaults to the model currently being evaluated).\n\n\nGoogle Provider\nThe web_search() tool uses Google Programmable Search Engine. To use it you will therefore need to setup your own Google Programmable Search Engine and also enable the Programmable Search Element Paid API. Then, ensure that the following environment variables are defined:\n\nGOOGLE_CSE_ID — Google Custom Search Engine ID\nGOOGLE_CSE_API_KEY — Google API key used to enable the Search API\n\n\n\n\nBash and Python\nThe bash() and python() tools enable execution of arbitrary shell commands and Python code, respectively. These tools require the use of a Tool Environment, which can provide sandboxing for untrusted code. For example, here is how you might use them in an evaluation where the model is asked to write code in order to solve capture the flag (CTF) challenges:\nCMD_TIMEOUT = 180\n\n@task\ndef intercode_ctf():\n    return Task(\n        dataset=read_dataset(),\n        plan=[\n            system_message(\"system.txt\"),\n            use_tools([\n                bash(CMD_TIMEOUT), \n                python(CMD_TIMEOUT)\n            ]),\n            generate(),\n        ],\n        scorer=includes(),\n        max_messages=30,\n        tool_environment=\"docker\",\n    )\nWe specify a 3-minute timeout for execution of the bash and python tools to ensure that they don’t perform extremely long running operations.\nSee the Agents section for more details on how to build evaluations that allow models to take arbitrary actions over a longer time horizon.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Tools</span>"
    ]
  },
  {
    "objectID": "agents.html",
    "href": "agents.html",
    "title": "Agents",
    "section": "",
    "text": "Overview\nAgents combine planning, memory, and tool usage to pursue more complex, longer horizon tasks (e.g. a Capture the Flag challenge). Agents are an area of active research, and many schemes for implementing them have been developed, including AutoGPT, ReAct, and Reflexion.\nInspect supports a variety of approaches to agent evaluations, including:\nWe’ll cover the basics of all of these approaches below.\nAn important additional consideration for agent evaluations is sandboxing (providing a secure environment for models to execute code within). The Tool Environments section goes into more depth on this.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "agents.html#overview",
    "href": "agents.html#overview",
    "title": "Agents",
    "section": "",
    "text": "Using Inspect’s built in tool-use loop along with a ReAct prompt that encourages the model to explicitly reason about each tool usage. When you call generate() and the model responds with a tool call, Inspect will automatically re-prompt the model for another generation.\nImplementing a custom agent loop that calls generate() directly. This will involve repeated calls to generate() with various tools being made available in the TaskState for each call. It may also involve using critique or reflection to help determine what actions to take next.\nAdapting another scaffolding scheme provided by a research paper or open source library (for example, using a 3rd party agent library like LangChain or Langroid).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "agents.html#tool-use-loop",
    "href": "agents.html#tool-use-loop",
    "title": "Agents",
    "section": "Tool Use Loop",
    "text": "Tool Use Loop\nA basic agent can be implemented by providing tools to the model with use_tools() and then calling generate(). Every time the model calls a tool, the appropriate Python function is called and then the model is re-prompted to generate based on the output of the function. This is typically combined with a ReAct prompt that urges the model to reason about each action it takes. For example:\nsystem_message(\"\"\"\n    Each message may perform one function call. You will\n    see the result of the function right after sending \n    the message. If you need to perform multiple actions,\n    you can always send more messages with subsequent \n    function calls. Do some reasoning before your actions,\n    describing what function calls you are going to use \n    and how they fit into your plan. \n\"\"\")\nNote that this is merely an example! A production ReAct prompt would typically be longer and more detailed. It would also typically have some fewshot examples from the dataset domain. See Prompt Engineering Guide: React for additional details.\n\nExample: InterCode CTF\nThis example is based on the CTF Benchmark from the InterCode paper (click the numbers in the right margin for additional explanation of the code):\nfrom dataset import read_dataset\nfrom inspect_ai import Task, task\nfrom inspect_ai.scorer import includes\nfrom inspect_ai.solver import (\n    Generate, TaskState, generate, solver,\n    system_message, use_tools, bash, python\n)\n\nCMD_TIMEOUT = 180  # max seconds to run bash/python cmds\nMAX_MESSAGES = 30  # max chat messages before giving up\n\n@task\ndef intercode_ctf(shuffle = False):\n    return Task(\n1        dataset=read_dataset(shuffle),\n        plan=[\n2            system_message(\"system.txt\"),\n            use_tools([\n3                bash(timeout=CMD_TIMEOUT),\n                python(timeout=CMD_TIMEOUT)\n            ]),\n            generate(),\n        ],\n        scorer=includes(),\n        max_messages=MAX_MESSAGES,            \n4        tool_environment=\"docker\",\n    )\n\n1\n\nThe read_dataset() function (imported from dataset.py) downloads the data from the InterCode GH repo and converts it into a native Inspect Dataset).\n\n2\n\nThe system prompt (system.txt) describes the CTF challenge, provides a ReAct prompt, and includes several fewshot examples.\n\n3\n\nMake the bash() and python() tools available (with a timeout to ensure they don’t perform extremely long running operations). Note that using these tools requires a tool environment, which you can see is provided below).\n\n4\n\nSpecify that Docker should be used as the tool environemnt (the container is built from the provided Dockerfile)\n\n\n\n\n\n\n\n\nTake special note of the CMD_TIMEOUT and MAX_MESSAGES constants. These put boundaries on execution time and steps, ensuring that agent tasks don’t run for extended periods (or even get in a loop where they never terminate). You should generally always set these values in your own agent evals.\n\n\n\nThe full source code for this example can be found in the Inspect GitHub repo at examples/agents/intercode-ctf.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "agents.html#custom-scaffolding",
    "href": "agents.html#custom-scaffolding",
    "title": "Agents",
    "section": "Custom Scaffolding",
    "text": "Custom Scaffolding\nThe default tool use loop demonstrated above will work fine for some tasks, but in other cases you may need to provide more custom logic. For example, you might want to:\n\nUrge the model to continue (or take a different path) if it gives up.\nExercise more fine grained control over which, when, and how many tool calls are made.\nRedirect the model to another trajectory if its not on a productive course.\nHave multiple generate() passes each with a distinct set of tools.\n\n\nTool Calls\nWhen you call the generate() function from a solver, use the tool_calls parameter to customise how tool calls made by the model are handled:\n\n\n\n\n\n\n\nloop\nResolve tools calls and then invoke generate(), proceeding in a loop which terminates when there are no more tool calls or max_messages is reached.\n\n\nsingle\nResolve at most a single set of tool calls and then return.\n\n\nnone\nDo not resolve tool calls at all (in this case you will need to invoke call_tools() directly).\n\n\n\nThe default behaviour is loop, which along with a ReAct prompt is a sound baseline choice for many agents. More sophisticated agents though will often want to use a custom solver that goes well beyond a simple loop. As a starting point, here is a solver that emulates the default loop behaviour:\n@solver\ndef agent_loop():\n    async def solve(state: TaskState, generate: Generate):\n1        while not state.completed:\n2            state = await generate(state, tool_calls=\"none\")\n3            if not state.output.message.tool_calls:\n                break\n4            state.messages.extend(\n                await call_tools(state.output.message, state.tools)\n            )\n        return state\n\n    return solve\n\n1\n\nThe state.completed property will be set to True whenever max_messages is exceeded.\n\n2\n\nBy specifying tool_calls=\"none\", we prevent generate() from actually calling any tools (this is now our responsibility via the call_tools() function.\n\n3\n\nIt’s possible that the model has chosen not to make any tool calls, and in that case we want to terminate the loop.\n\n4\n\nExplicitly resolve tool calls by invoking call_tools() on the assistant message and appending the returned tool messages to the history.\n\n\nYou can imagine several ways you might want to customise this loop:\n\nAdding another termination condition for the output satisfying some criteria.\nUrging the model to keep going after it decides to stop calling tools.\nExamining and possibly filtering the tool calls before invoking call_tools()\nAdding a critique / reflection step between tool calling and generate.\nDeep copying the TaskState and exploring several trajectories.\n\n\n\nTool Filtering\nAbove we demonstrated making tools available to the model via use_tools(). While this is convenient for simple agents, you may also want to filter the available tools either based on task stages or dynamically based on some other criteria.\nHere’s an example of a Solver that filters the available tools between calls to generate():\n@solver\ndef generate_ctf():\n    async def solve(state: TaskState, generate: Generate):\n        \n        # first pass w/ core tools\n        state.tools = [decompile(), dissasemble(), bash()]\n        state = await generate(state)\n\n        # second pass w/ prompt and python tool only\n        state.tools = [python()]\n        state.messages.append(ChatMessageUser( \n            content = \"Use Python to extract the flag.\" \n        ))  \n        state = await generate(state)\n\n        # clear tools and return\n        state.tools = []\n        return state\n    \n    return solve\nIn this example we rely on the default generate() tool calling behaviour (\"loop\"). However, you can also imaging combining tool filtering with the more tailored tool calling logic described in Tool Calls.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "agents.html#agent-libraries",
    "href": "agents.html#agent-libraries",
    "title": "Agents",
    "section": "Agent Libraries",
    "text": "Agent Libraries\nYou can also adapt code from a research paper or 3rd party agent library to run within an Inspect solver. Below we’ll provide an example of doing this for a LangChain Agent.\nWhen adapting 3rd party agent code, it’s important that the agent scaffolding use Inspect’s model API rather than whatever interface is built in to the existing code or library (otherwise you might be evaluating the wrong model!). If the agent is executing arbitrary code, it’s also beneficial to use Inspect Tool Environments for sandboxing.\n\nExample: LangChain\nThis example demonstrates how to integrate a LangChain Agent with Inspect. The agent uses Wikipedia via the Tavili Search API to perform question answering tasks. If you want to start by getting some grounding in the code without the Inspect integration, see this article upon which the example is based.\nThe main thing that an integration with an agent framework needs to account for is:\n\nBridging Inspect’s model API into the API of the agent framework. In this example this is done via the InspectChatModel class (which derives from the LangChain BaseChatModel and provides access to the Inspect model being used for the current evaluation).\nBridging from the Inspect solver interface to the standard input and output types of the agent library. In this example this is provided by the langchain_solver() function, which takes a LangChain agent function and converts it to an Inspect solver.\n\nHere’s the implementation of langchain_solver() (imports excluded for brevity):\n# Interface for LangChain agent function\nclass LangChainAgent(Protocol):\n    async def __call__(self, llm: BaseChatModel, input: dict[str, Any]): ...\n\n# Convert a LangChain agent function into a Solver\ndef langchain_solver(agent: LangChainAgent) -&gt; Solver:\n\n    async def solve(state: TaskState, generate: Generate) -&gt; TaskState:\n\n        # create the inspect model api bridge\n        llm = InspectChatModel()\n\n        # call the agent\n        await agent(\n            llm = llm,\n            input = dict(\n                input=state.user_prompt.text,\n                chat_history=as_langchain_chat_history(\n                    state.messages[1:]\n                ),\n            )\n        )\n\n        # collect output from llm interface\n        state.messages = llm.messages\n        state.output = llm.output\n        state.output.completion = output\n        \n        # return state\n        return state\n\n    return solve\n\n# LangChain BaseChatModel for Inspect Model API\nclass InspectChatModel(BaseChatModel):\n     async def _agenerate(\n        self,\n        messages: list[BaseMessage],\n        stop: list[str] | None = None,\n        run_manager: AsyncCallbackManagerForLLMRun | None = None,\n        **kwargs: dict[str, Any],\n    ) -&gt; ChatResult:\n        ...\n\n\n\n\n\n\nNote that the the inspect_langchain module imported here is not a built in feature of Inspect. Rather, you can find its source code as part of the example. You can use this to create your own LangChain agents or as the basis for creating similar integrations with other agent frameworks.\n\n\n\nNow here’s the wikipedia_search() solver (imports again excluded for brevity):\n@solver\ndef wikipedia_search(\n    max_iterations: int | None = 15,\n    max_execution_time: float | None = None\n) -&gt; Solver:\n    # standard prompt for tools agent\n    prompt = hub.pull(\"hwchase17/openai-tools-agent\")\n\n1    # tavily and wikipedia tools\n    tavily_api = TavilySearchAPIWrapper()  # type: ignore\n    tools = (\n        [TavilySearchResults(api_wrapper=tavily_api)] + \n        load_tools([\"wikipedia\"])\n    )\n\n2    # agent function\n    async def agent(\n        llm: BaseChatModel, \n        input: dict[str, Any]\n    ) -&gt; str | list[str | dict[str,Any]]:  \n        # create agent\n        tools_agent = create_openai_tools_agent(\n          llm, tools, prompt\n        )\n        executor = AgentExecutor.from_agent_and_tools(\n            agent=cast(BaseMultiActionAgent, tools_agent),\n            tools=tools,\n            name=\"wikipedia_search\",\n            max_iterations=max_iterations,  \n            max_execution_time=max_execution_time\n        )\n\n3        # execute the agent and return output\n        result = await executor.ainvoke(input)  \n        return result[\"output\"]\n\n4    # return agent function as inspect solver\n    return langchain_solver(agent)\n\n1\n\nNote that we register native LangChain tools. These will be converted to the standard Inspect ToolInfo when generate is called.\n\n2\n\nThis is the standard interface to LangChain agents. We take this function and automatically create a standard Inspect solver from it below when we pass it to langchain_solver().\n\n3\n\nInvoke the agent using the chat history passed in input. We call the async executor API to play well with Inspect’s concurrency.\n\n4\n\nThe langchain_solver() function maps the simpler agent function semantics into the standard Inspect solver API.\n\n\nIf you reviewed the original article that this example was based on, you’ll see that most of the code is unchanged (save for the fact that we have switched from a function agent to a tools agent). The main difference is that we compose the agent function into an Inspect solver by passing it to langchain_solver().\nFinally, here’s a task that uses the wikipedia_search() solver:\n@task\ndef wikipedia() -&gt; Task:\n    return Task(\n        dataset=json_dataset(\"wikipedia.jsonl\"),\n        plan=wikipedia_search(),\n        scorer=model_graded_fact(),\n    )\nThe full source code for this example can be found in the Inspect GitHub repo at examples/agents/langchain.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "agents.html#sec-tool-environments",
    "href": "agents.html#sec-tool-environments",
    "title": "Agents",
    "section": "Tool Environments",
    "text": "Tool Environments\nThe examples shown above execute tool code within the main process running the evaluation task. In some cases however, you may require the provisioning of dedicated environments for running tool code. This might be the case if:\n\nYou are creating tools that enable execution of arbitrary code (e.g. a tool that executes shell commands or Python code).\nYou need to provision per-sample file system resources.\nYou want to provide access to a more sophisticated evaluation environment (e.g. creating network hosts for a cybersecurity eval).\n\n\nExample: File Listing\nLet’s take a look at a simple example to illustrate. First, we’ll define a list_files() tool. This tool need to access the ls command—it does so by calling the tool_environment() function to get access to the ToolEnvironment instance for the currently executing Sample:\nfrom inspect_ai.tool import ToolError, tool, tool_environment\n\n@tool(prompt=\"Use the list_files function to enumerate files.\")\ndef list_files():\n    async def execute(dir: str):\n        \"\"\"List the files in a directory.\n\n        Args:\n            dir (str): Directory\n\n        Returns:\n            File listing of the directory\n        \"\"\"\n        result = await tool_environment().exec([\"ls\", dir])\n        if result.success:\n            return result.stdout\n        else:\n            raise ToolError(result.stderr)\n\n    return execute\nThe exec() function is used to list the directory contents. Note that its not immediately clear where or how exec() is implemented (that will be described shortly!).\nHere’s an evaluation that makes use of this tool:\nfrom inspect_ai import task, Task\nfrom inspect_ai.dataset import Sample\nfrom inspect_ai.scorer import includes\nfrom inspect_ai.solver import generate, use_tools\n\ndataset = [\n    Sample(\n        input='Is there a file named \"bar.txt\" ' \n               + 'in the current directory?',\n        target=\"Yes\",\n        files={\"bar.txt\": \"hello\"},\n    )\n]\n\n@task\ndef file_probe()\n    return Task(\n        dataset=dataset,\n        plan=[\n            use_tools([list_files()]), \n            generate()\n        ],\n        tool_environment=\"docker\",\n        scorer=includes(),\n    )\n)\nWe’ve included tool_environment = \"docker\" to indicate that tool environment operations should be executed in a Docker container. Specifying a tool environment (either at the task or evaluation level) is required if your tools call the tool_environment() function.\nNote that files are specified as part of the Sample. Files can be specified inline using plain text (as depicted above), inline using a base64-encoded data URI, or as a path to a file or remote resource (e.g. S3 bucket). Relative file paths are resolved according to the location of the underlying dataset file.\n\n\nEnvironment Interface\nThe following methods are available for all tool environments:\nclass ToolEnvironment:\n   \n    async def exec(\n        self,\n        cmd: list[str],\n        input: str | bytes | None = None,\n        cwd: str | None = None,\n        env: dict[str, str] = {},\n        timeout: int | None = None,\n    ) -&gt; ExecResult[str]:\n        ...\n\n    async def write_file(\n        self, file: str, contents: str | bytes\n    ) -&gt; None:\n        ...\n\n    async def read_file(\n        self, file: str, text: bool = True\n    ) -&gt; Union[str | bytes]:\n        ...\nNote that read_file() will raise a FileNotFoundError if the specified file does not exist in the tool environment. Tools calling read_file() will often want to catch the FileNotFoundError and re-throw a ToolError (since models will often attempt to read files that do not exist).\n\n\nEnvironment Binding\nThere are two tool environments built in to Inspect:\n\n\n\nEnvironment Type\nDescription\n\n\n\n\nlocal\nRun tool_environment() methods in the same file system as the running evaluation (should only be used if you are already running your evaluation in another sandbox).\n\n\ndocker\nRun tool_environment() methods within a Docker container (see the Docker Configuration section below for additional details).\n\n\n\nTool environments can be bound at the Task level or at the eval() level (where eval() takes precedence). To bind a tool environment to a Task, use the tool_environment option:\nTask(\n    dataset=dataset,\n    plan([\n        use_tools([read_file(), list_files()])), \n        generate()\n    ]),\n    scorer=match(),\n    tool_environment=\"docker\"\n)\nFor this example, if there is a compose.yaml file in the task directory it will be used to provision Docker services (if there is no compose.yaml then the Docker’s default Python 3.12 image will be used). You can specify an alternate config file using a tuple:\ntool_environment=(\"docker\",\"my-compose.yaml\")\n\n\nDocker Configuration\nBefore using Docker tool environments, please be sure to install Docker Engine (version 24.0.7 or greater).\nYou can use the Docker tool enviornment without any special configuration, however most commonly you’ll provide explicit configuration via either a Dockerfile or a Docker Compose configuration file (compose.yaml).\nHere is how Docker tool environments are created based on the presence of Dockerfile and/or compose.yml in the task directory:\n\n\n\nConfig Files\nBehavior\n\n\n\n\nNone\nCreates a tool environment based on the official python:3.12-bookworm image.\n\n\nDockerfile\nCreates a tool environment by building the image.\n\n\ncompose.yaml\nCreates tool environment(s) based on compose.yaml.\n\n\n\nProviding a compose.yaml is not strictly required, as Inspect will automatically generate one as needed. Note that the automatically generated compose file will restrict internet access by default, so if your evaluations require this you’ll need to provide your own compose.yaml file.\nHere’s an example of a compose.yaml file that sets container resource limits and isolates it from all network interactions including internet access:\n\n\ncompose.yaml\n\nservices:\n  default: \n    build: .\n    command: tail -f /dev/null\n    cpus: 1.0\n    mem_limit: 0.5gb\n    network_mode: none\n\nThe command is provided to prevent the container from exiting.\nHere is what a simple compose.yaml would look like for a local pre-built image named ctf-agent-environment (resource and network limits excluded for brevity):\n\n\ncompose.yaml\n\nservices:\n  default: \n    image: ctf-agent-environment\n    x-local: true\n    command: tail -f /dev/null\n\nThe ctf-agent-environment is not an image that exists on a remote registry, so we add the x-local: true to indicate that it should not be pulled. If local images are tagged, they also will not be pulled by default (so x-local: true is not required). For example:\n\n\ncompose.yaml\n\nservices:\n  default: \n    image: ctf-agent-environment:1.0.0\n    command: tail -f /dev/null\n\nIf we are using an image from a remote registry we similarly don’t need to include x-local:\n\n\ncompose.yaml\n\nservices:\n  default:\n    image: python:3.12-bookworm\n    command: tail -f /dev/null\n\nSee the Docker Compose documentation for information on all available container options.\n\nMultiple Environments\nIn some cases you may want to create multiple tool environments (e.g. if one environment has complex dependencies that conflict with the dependencies of other environments). To do this specify multiple named services:\n\n\ncompose.yaml\n\nservices:\n  default:\n    image: ctf-agent-environment\n    x-local: true\n    cpus: 1.0\n    mem_limit: 0.5gb\n  victim:\n    image: ctf-victim-environment\n    x-local: true\n    cpus: 1.0\n    mem_limit: 1gb\n\nThe first environment listed is the “default” environment, and can be accessed from within a tool with a normal call to tool_environment(). Other environments would be accessed by name, for example:\ntool_environment()          # default tool environment\ntool_environment(\"victim\")  # named tool environment\n\n\n\n\n\n\nNote\n\n\n\nIf you define multiple tool environments you are required to name one of them “default” so that Inspect knows which environment to copy samples files to and resolve for calls to tool_environment() without an argument.\n\n\n\n\nFiles\nSample files will be copied into the default tool environment unless their name contains a prefix mapping them into another environment (e.g. \"victim:flag.txt\": \"flag.txt\").\n\n\nInfrastructure\nNote that in many cases you’ll want to provision additional infrastructure (e.g. other hosts or volumes). For example, here we define an additional container (“writer”) as well as a volume shared between the default container and the writer container:\nservices:\n  default: \n    image: ctf-agent-environment\n    x-local: true\n    volumes:\n      - ctf-challenge-volume:/shared-data\n    \n  writer:\n    image: ctf-challenge-writer\n    x-local: true\n    volumes:\n      - ctf-challenge-volume:/shared-data\nvolumes:\n  ctf-challenge-volume:\nSee the documentation on Docker Compose files for information on their full schema and feature set.\n\n\nSample Metadata\nYou might want to interpolate Sample metadata into your Docker compose files. You can do this using the standard clmpose environment variable syntax, where any metadata in the Sample is made available with a SAMPLE_METADATA_ prefix. For example, you might have a per-sample memory limit (with a default value of 0.5gb if unspecified):\nservices:\n  default:\n    image: ctf-agent-environment\n    x-local: true\n    cpus: 1.0\n    mem_limit: ${SAMPLE_METDATA_MEMORY_LIMIT-0.5gb}\nNote that - suffix that provides the default value of 0.5gb. This is important to include so that when the compose file is read without the context of a Sample (for example, when pulling/building images at startup) that a default value is available.\n\n\n\nEnvironment Cleanup\nWhen a task is completed, Inspect will automatically cleanup resources associated with the tool environment (e.g. containers, images, and networks). If for any reason resources are not cleaned up (e.g. if the cleanup itself is interrupted via Ctrl+C) you can globally cleanup all environments with the inspect toolenv cleanup command. For example, here we cleanup all environments associated with the docker provider:\n$ inspect toolenv cleanup docker\nIn some cases you may prefer not to cleanup environments. For example, you might want to examine their state interactively from the shell in order to debug an agent. Use the --no-toolenv-cleanup argument to do this:\n$ inspect eval ctf.py --no-toolenv-cleanup\nYou can also do this when using eval():\neval(\"ctf.py\", toolenv_cleanup = False)\nWhen you do this, you’ll see something like the following printed out at the end of the eval:\n\nYou then might use this command to get a shell inside one of the containers:\ndocker exec -it inspect-intercode_ctf-ipg9tbviycpvlgwja5anyvn-default-1 bash\nWhen you no longer need the environments, you can clean them up either all at once or individually:\n# cleanup all environments\ninspect toolenv cleanup docker\n\n# cleanup single environment\ninspect toolenv cleanup docker inspect-intercode_ctf-ipg9tbviycpvlgwja5anyvn\n\n\nResource Management\nCreating and executing code within Docker containers can be expensive both in terms of memory and CPU utilisation. Inspect provides some automatic resource management to keep usage reasonable in the default case. This section describes that behaviour as well as how you can tune it for your use-cases.\n\nRunning Containers\nAs described above, each Sample is provisioned its own container. The number of running containers for an evaluation is therefore determined by the max_samples option (which is by default set to max_connections, typically 10 unless overridden).\nUse max_samples to dial up or down the number of containers running at any given time. Note that a running container does not necessarily use CPU resources unless it has active background processes.\nUse a compose.yaml file to limit the resources consumed by each running container. For example:\n\n\ncompose.yaml\n\nservices:\n  default: \n    image: ctf-agent-environment\n    x-local: true\n    command: tail -f /dev/null\n    cpus: 1.0\n    mem_limit: 0.5gb\n\n\n\nConcurrent Execution\nThe ToolEnvironment.exec() method runs a command within a tool environment, typically consuming CPU resources. To protect against overwhelming the system’s CPUs, the implementation of exec() uses Inspect’s subprocess() function, which automatically limits concurrent child processes to the number of CPUs on your system (os.cpu_count()).\nYou can change the number of permitted concurrent subprocess executions using the max_subprocesses option. You might do this for example if you know that your exec() commands tend to use multiple CPU cores and thus should be executed with less concurrency.\n\n\n\nTroubleshooting\nYou can view more detailed logging around the creation and use of tool environments by using the tools log level. For example:\n$ inspect eval ctf.py --log-level tools\nThe tools log level is just above warning (so it will not show http or debug level messages).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Agents</span>"
    ]
  },
  {
    "objectID": "scorers.html",
    "href": "scorers.html",
    "title": "Scorers",
    "section": "",
    "text": "Overview\nScorers evaluate whether solvers were successful in finding the right output for the target defined in the dataset, and in what measure. Scorers generally take one of the following forms:\nScorers also define one or more metrics which are used to aggregate scores (e.g. accuracy() which computes what percentage of scores are correct, or mean() which provides an average for scores that exist on a continuum).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#overview",
    "href": "scorers.html#overview",
    "title": "Scorers",
    "section": "",
    "text": "Extracting a specific answer out of a model’s completion output using a variety of heuristics.\nApplying a text similarity algorithm to see if the model’s completion is close to what is set out in the target.\nUsing another model to assess whether the model’s completion satisfies a description of the ideal answer in target.\nUsing another rubric entirely (e.g. did the model produce a valid version of a file format, etc.)",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#built-in-scorers",
    "href": "scorers.html#built-in-scorers",
    "title": "Scorers",
    "section": "Built-In Scorers",
    "text": "Built-In Scorers\nInspect includes some simple text matching scorers as well as a couple of model graded scorers. Built in scorers can be imported from the inspect_ai.scorer module. Below is a summary of these scorers. There is not (yet) reference documentation on these functions so the best way to learn about how they can be customised, etc. is to use the Go to Definition command in your source editor.\n\nincludes()\nDetermine whether the target from the Sample appears anywhere inside the model output. Can be case sensitive or insensitive (defaults to the latter).\nmatch()\nDetermine whether the target from the Sample appears at the beginning or end of model output (defaults to looking at the end). Has options for ignoring case, white-space, and punctuation (all are ignored by default).\npattern()\nExtract the answer from model output using a regular expression.\nanswer()\nScorer for model output that preceded answers with “ANSWER:”. Can extract letters, words, or the remainder of the line.\nmodel_graded_qa()\nHave another model assess whether the model output is a correct answer based on the grading guidance contained in target. Has a built-in template that can be customised.\nmodel_graded_fact()\nHave another model assess whether the model output contains a fact that is set out in target. This is a more narrow assessment than model_graded_qa(), and is used when model output is too complex to be assessed using a simple match() or pattern() scorer.\n\nScorers provide one or more built-in metrics (each of the scorers above provides accuracy as a metric). You can also provide your own custom metrics in Task definitions. For example:\nTask(\n    dataset=dataset,\n    plan=[\n        system_message(SYSTEM_MESSAGE),\n        multiple_choice()\n    ],\n    scorer=match(),\n    metrics=[custom_metric()]\n)",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#model-graded",
    "href": "scorers.html#model-graded",
    "title": "Scorers",
    "section": "Model Graded",
    "text": "Model Graded\nModel graded scorers are well suited to assessing open ended answers as well as factual answers that are embedded in a longer narrative. The built-in model graded scorers can be customised in several ways—you can also create entirely new model scorers (see the model graded example below for a starting point).\nHere is the declaration for the model_graded_qa() function:\n@scorer(metrics=[accuracy(), bootstrap_std()])\ndef model_graded_qa(\n    template: str | None = None,\n    instructions: str | None = None,\n    grade_pattern: str | None = None,\n    partial_credit: bool = False,\n    model: list[str | Model] | str | Model | None = None,\n) -&gt; Scorer:\n    ...\nThe default model graded QA scorer is tuned to grade answers to open ended questions. The default template and instructions ask the model to produce a grade in the format GRADE: C or GRADE: I, and this grade is extracted using the default grade_pattern regular expression. The grading is by default done with the model currently being evaluated. There are a few ways you can customise the default behaviour:\n\nProvide alternate instructions—the default instructions ass the model to use chain of thought reasoning and provide grades in the format GRADE: C or GRADE: I. Note that if you provide instructions that ask the model to format grades in a different way, you will also want to customise the grade_pattern.\nSpecify partial_credit = True to prompt the model to assign partial credit to answers that are not entirely right but come close (metrics by default convert this to a value of 0.5). Note that this parameter is only valid when using the default instructions.\nSpecify an alternate model to perform the grading (e.g. a more powerful model or a model fine tuned for grading).\nSpecify a different template—note that templates are passed these variables: question, criterion, answer, and instructions.\n\nThe model_graded_fact() scorer works identically to model_graded_qa(), and simply provides an alternate template oriented around judging whether a fact is included in the model output.\nIf you want to understand how the default templates for model_graded_qa() and model_graded_fact() work, see their source code.\n\nMultiple Models\nThe built-in model graded scorers also support using multiple grader models (whereby the final grade is chosen by majority vote). For example, here we specify that 3 models should be used for grading:\nmodel_graded_qa(\n    model = [\n        \"google/gemini-1.0-pro\",\n        \"anthropic/claude-3-opus-20240229\" \n        \"together/meta-llama/Llama-3-70b-chat-hf\",\n    ]\n)\nThe implementation of multiple grader models takes advantage of the multi_scorer() and majority_vote() functions, both of which can be used in your own scorers (as described in the Multi Scorer section below).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#custom-scorers",
    "href": "scorers.html#custom-scorers",
    "title": "Scorers",
    "section": "Custom Scorers",
    "text": "Custom Scorers\nCustom scorers are functions that take a TaskState and Target, and yield a Score.\nasync def score(state: TaskState, target: Target):\n     # Compare state / model output with target\n     # to yield a score\n     return Score(value=...)\nFirst we’ll talk about the core Score and Value objects, then provide some examples of custom scorers to make things more concrete.\n\n\n\n\n\n\nNote that score() above is declared as an async function. When creating custom scorers, it’s critical that you understand Inspect’s concurrency model. More specifically, if your scorer is doing non-trivial work (e.g. calling REST APIs, executing external processes, etc.) please review Parallelism before proceeding.\n\n\n\n\nScore\nThe components of Score include:\n\n\n\n\n\n\n\n\nField\nType\nDescription\n\n\n\n\nvalue\nValue\nValue assigned to the sample (e.g. “C” or “I”, or a raw numeric value).\n\n\nanswer\nstr\nText extracted from model output for comparison (optional).\n\n\nexplanation\nstr\nExplanation of score, e.g. full model output or grader model output (optional).\n\n\nmetadata\ndict[str,Any]\nAdditional metadata about the score to record in the log file (optional).\n\n\n\nFor example, the following are all valid Score objects:\nScore(value=\"C\")\nScore(value=\"I\")\nScore(value=0.6)\nScore(\n    value=\"C\" if extracted == target.text else \"I\", \n    answer=extracted, \n    explanation=state.output.completion\n)\nIf you are extracting an answer from within a completion (e.g. looking for text using a regex pattern, looking at the beginning or end of the completion, etc.) you should strive to always return an answer as part of your Score, as this makes it much easier to understand the details of scoring when viewing the eval log file.\n\n\nValue\nValue is union over the main scalar types as well as a list or dict of the same types:\nValue = Union[\n    str | int | float | bool,\n    list[str | int | float | bool],\n    dict[str, str | int | float | bool],\n]\nThe vast majority of scorers will use str (e.g. for correct/incorrect via “C” and “I”) or float (the other types are there to meet more complex scenarios). One thing to keep in mind is that whatever Value type you use in a scorer must be supported by the metrics declared for the scorer (more on this below).\nNext, we’ll take a look at the source code for a couple of the built in scorers as a jumping off point for implementing your own scorers. If you are working on custom scorers, you should also review the Scorer Workflow section below for tips on optimising your development process.\n\n\nExample: Includes\nHere is the source code for the built-in includes() scorer:\n1@scorer(metrics=[accuracy(), bootstrap_std()])\ndef includes(ignore_case: bool = True):\n\n2    async def score(state: TaskState, target: Target):\n\n        # check for correct\n        answer = state.output.completion\n3        target = target.text\n        if ignore_case:\n            correct = answer.lower().rfind(target.lower()) != -1\n        else:\n            correct = answer.rfind(target) != -1\n\n        # return score\n        return Score(\n4            value = CORRECT if correct else INCORRECT,\n5            answer=answer\n        )\n\n    return score\n\n1\n\nThe function applies the @scorer decorator and registers two metrics for use with the scorer.\n\n2\n\nThe score() function is declared as async. This is so that it can participate in Inspect’s optimised scheduling for expensive model generation calls (this scorer doesn’t call a model but others will).\n\n3\n\nWe make use of the text property on the Target. This is a convenience property to get a simple text value out of the Target (as targets can technically be a list of strings).\n\n4\n\nWe use the special constants CORRECT and INCORRECT for the score value (as the accuracy() and bootstrap_std() metrics know how to convert these special constants to float values (1.0 and 0.0 respectively).\n\n5\n\nWe provide the full model completion as the answer for the score (answer is optional, but highly recommended as it is often useful to refer to during evaluation development).\n\n\n\n\nExample: Model Grading\nHere’s a somewhat simplified version of the code for the model_graded_qa() scorer:\n\n@scorer(metrics=[accuracy(), bootstrap_std()])\ndef model_graded_qa(\n    template: str = DEFAULT_MODEL_GRADED_QA_TEMPLATE,\n    instructions: str = DEFAULT_MODEL_GRADED_QA_INSTRUCTIONS,\n    grade_pattern: str = DEFAULT_GRADE_PATTERN,\n    model: str | Model | None = None,\n) -&gt; Scorer:\n   \n    # resolve grading template and instructions, \n    # (as they could be file paths or URLs)\n    template = resource(template)\n    instructions = resource(instructions)\n\n    # resolve model\n    grader_model = get_model(model)\n\n    async def score(state: TaskState, target: Target) -&gt; Score:\n        # format the model grading template\n        score_prompt = template.format(\n            question=state.input_text,\n            answer=state.output.completion,\n            criterion=target.text,\n            instructions=instructions,\n        )\n\n        # query the model for the score\n        result = await grader_model.generate(score_prompt)\n\n        # extract the grade\n        match = re.search(grade_pattern, result.completion)\n        if match:\n            return Score(\n                value=match.group(1),\n                answer=match.group(0),\n                explanation=result.completion,\n            )\n        else:\n            return Score(\n                value=INCORRECT,\n                explanation=\"Grade not found in model output: \"\n                + f\"{result.completion}\",\n            )\n\n    return score\nNote that the call to model_grader.generate() is done with await—this is critical to ensure that the scorer participates correctly in the scheduling of generation work.\nNote also we use the input_text property of the TaskState to access a string version of the original user input to substitute it into the grading template. Using the input_text has two benefits: (1) It is guaranteed to cover the original input from the dataset (rather than a transformed prompt in messages); and (2) It normalises the input to a string (as it could have been a message list).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#sec-multiple-scorers",
    "href": "scorers.html#sec-multiple-scorers",
    "title": "Scorers",
    "section": "Multiple Scorers",
    "text": "Multiple Scorers\n\n\n\n\n\n\nThe multiple scorers feature described below is available in only the very latest version of Inspect (v0.3.18). You can upgrade to the latest version with:\n$ pip install --upgrade inspect-ai\n\n\n\nThere are several ways to use multiple scorers in an evaluation:\n\nYou can provide a list of scorers in a Task definition (this is the best option when scorers are entirely independent)\nYou can yield multiple scores from a Scorer (this is the best option when scores share code and/or expensive computations).\nYou can use multiple scorers and then aggregate them into a single scorer (e.g. majority voting).\n\n\nList of Scorers\nTask definitions can specify multiple scorers. For example, the below task will use two different models to grade the results, storing two scores with each sample, one for each of the two models:\nTask(\n    dataset=dataset,\n    plan=[\n        system_message(SYSTEM_MESSAGE),\n        generate()\n    ],\n    scorer=[\n        model_graded_qa(model=\"openai/gpt-4\"), \n        model_graded_qa(model=\"google/gemini-1.5-pro\")\n    ],\n)\nThis is useful when there is more than one way to score a result and you would like preserve the individual score values with each sample (versus reducing the multiple scores to a single value).\n\n\nScorer with Multiple Values\nYou may also create a scorer which yields multiple scores. This is useful when the scores use data that is shared or expensive to compute. For example:\n@scorer(\n1    metrics={\n        \"a_count\": [mean(), bootstrap_std()],\n        \"e_count\": [mean(), bootstrap_std()]\n    }\n)\ndef letter_count():\n    async def score(state: TaskState, target: Target):\n        answer = state.output.completion\n        a_count = answer.count(\"a\")\n        e_count = answer.count(\"e\")\n2        return Score(\n            value={\"a_count\": a_count, \"e_count\": e_count},\n            answer=answer\n        )\n\n    return score\n\ntask = Task(\n    dataset=[Sample(input=\"Tell me a story.\"],\n    scorer=letter_count()\n)\n\n1\n\nThe metrics for this scorer are a dictionary—this defines metrics to be applied to scores (by name).\n\n2\n\nThe score value itself is a dictionary—the keys corresponding to the keys defined in the metrics on the @scorer decorator.\n\n\nThe above example will produce two scores, a_count and e_count, each of which will have metrics for mean and bootstrap_std.\n\n\nReducing Multiple Scores\nIt’s possible to use multiple scorers in parallel, then reduce their output into a final overall score. This is done using the multi_scorer() function. For example, this is roughly how the built in model graders use multiple models for grading:\nmulti_scorer(\n    scorers = [model_graded_qa(model=model) for model in models],\n    reducer = majority_vote\n)\nUse of multi_scorer() requires both a list of scorers as well as a reducer which is a function that takes a list of scores and turns it into a single score. In this case we use the built in majority_vote() reducer which returns the score that appeared most frequently in the answers.\nYou can imagine a variety of different strategies for reducing scores (take the average, take the high or low, majority vote, etc.). For example, here’s a reducer that computes the average score:\nimport numpy as np\n\ndef average_score(scores: list[Score]) -&gt; Score:\n    values = [score.as_float() for score in scores]\n    avg = np.mean(values).item()\n    return Score(\n        value=avg,\n        explanation=f\"average of {', '.join(values)}\"\n    )\nFurther, you will need to wrap your use of multi_scorer() inside a @scorer decorated function (with the requisite metrics specified). For example:\n@scorer(metrics=[mean()])\ndef multi_model_graded(models)\n    return multi_scorer(\n        scorers = [model_graded_qa(model=model) for model in models],\n        reducer = average_score\n    )",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#metrics",
    "href": "scorers.html#metrics",
    "title": "Scorers",
    "section": "Metrics",
    "text": "Metrics\nEach scorer provides one or more built-in metrics (typically accuracy and bootstrap_std). In addition, you can specify other metrics (either built-in or custom) to compute when defining a Task:\nTask(\n    dataset=dataset,\n    plan=[\n        system_message(SYSTEM_MESSAGE),\n        multiple_choice()\n    ],\n    scorer=match(),\n    metrics=[custom_metric()]\n)\n\nBuilt-In Metrics\nInspect includes some simple built in metrics for calculating accuracy, mean, etc. Built in metrics can be imported from the inspect_ai.scorer module. Below is a summary of these metrics. There is not (yet) reference documentation on these functions so the best way to learn about how they can be customised, etc. is to use the Go to Definition command in your source editor.\n\naccuracy()\nCompute proportion of total answers which are correct. For correct/incorrect scores assigned 1 or 0, can optionally assign 0.5 for partially correct answers.\nmean()\nMean of all scores.\nvar()\nVariance over all scores.\nbootstrap_std()\nStandard deviation of a bootstrapped estimate of the mean. 1000 samples are taken by default (modify this using the num_samples option).\n\n\n\nCustom Metrics\nYou can also add your own metrics with @metric decorated functions. For example, here is the implementation of the variance metric:\nimport numpy as np\n\nfrom inspect_ai.scorer import Metric, Score, metric\n\ndef var() -&gt; Metric:\n    \"\"\"Compute variance over all scores.\"\"\"\n\n    def metric(scores: list[Score]) -&gt; float:\n        return np.var([score.as_float() for score in scores]).item()\n\n    return metric\nNote that the Score class contains a Value that is a union over several scalar and collection types. As a convenience, Score includes a set of accessor methods to treat the value as a simpler form (e.g. above we use the score.as_float() accessor).",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "scorers.html#sec-scorer-workflow",
    "href": "scorers.html#sec-scorer-workflow",
    "title": "Scorers",
    "section": "Workflow",
    "text": "Workflow\n\nScore Command\nBy default, model output in evaluations is automatically scored. However, you can separate generation and scoring by using the --no-score option. For example:\ninspect eval popularity.py --model openai/gpt-4 --no-score\nYou can score an evaluation previously run this way using the inspect score command:\n# score last eval\ninspect score popularity.py\n\n# score specific log file\ninspect score popularity.py ./logs/2024-02-23_task_gpt-4_TUhnCn473c6.json\n\n\n\n\n\n\nTip\n\n\n\nUsing a distinct scoring step is particularly useful during scorer development, as it bypasses the entire generation phase, saving lots of time and inference costs.\n\n\n\n\nLog Overwriting\nBy default, inspect score overwrites the file it scores. If don’t want to overwrite target files, pass the --no-overwrite flag:\ninspect score popularity.py --no-overwrite\nWhen specifying --no-overwrite, a -scored suffix will be added to the original log file name:\n./logs/2024-02-23_task_gpt-4_TUhnCn473c6-scored.json\nNote that the --no-overwrite flag does not apply to log files that already have the -scored suffix—those files are always overwritten by inspect score. If you plan on scoring multiple times and you want to save each scoring output, you will want to copy the log to another location before re-scoring.\n\n\nPython API\nIf you are exploring the performance of different scorers, you might find it more useful to call the score() function using varying scorers or scorer options. For example:\nlog = eval(popularity, model=\"openai/gpt-4\")[0]\n\ngrader_models = [\n    \"openai/gpt-4\",\n    \"anthropic/claude-3-opus-20240229\",\n    \"google/gemini-1.0-pro\",\n    \"mistral/mistral-large-latest\"\n]\n\nscoring_logs = [score(log, model_graded_qa(model=model)) \n                for model in grader_models]\n\nplot_results(scoring_logs)",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>Scorers</span>"
    ]
  },
  {
    "objectID": "datasets.html",
    "href": "datasets.html",
    "title": "Datasets",
    "section": "",
    "text": "Overview\nInspect has native support for reading datasets in the CSV, JSON, and JSON Lines formats, as well as from Hugging Face. In addition, the core dataset interface for the evaluation pipeline is flexible enough to accept data read from just about any source (see the Custom Reader section below for details).\nIf your data is already in a format amenable for direct reading as an Inspect Sample, reading a dataset is as simple as this:\nOf course, many real-world datasets won’t be so trivial to read. Below we’ll discuss the various ways you can adapt your datasets for use with Inspect.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#overview",
    "href": "datasets.html#overview",
    "title": "Datasets",
    "section": "",
    "text": "from inspect_ai.dataset import csv_dataset, json_dataset\ndataset1 = csv_dataset(\"dataset1.csv\")\ndataset2 = json_dataset(\"dataset2.json\")",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#dataset-samples",
    "href": "datasets.html#dataset-samples",
    "title": "Datasets",
    "section": "Dataset Samples",
    "text": "Dataset Samples\nThe core data type underlying the use of datasets with Inspect is the Sample, which consists of a required input field and several other optional fields:\nClass inspect_ai.dataset.Sample\n\n\n\n\n\n\n\n\nField\nType\nDescription\n\n\n\n\ninput\nstr | list[ChatMessage]\nThe input to be submitted to the model.\n\n\nchoices\nlist[str] | None\nOptional. Multiple choice answer list.\n\n\ntarget\nstr | list[str] | None\nOptional. Ideal target output. May be a literal value or narrative text to be used by a model grader.\n\n\nid\nstr | None\nOptional. Unique identifier for sample.\n\n\nmetadata\ndict[str | Any] | None\nOptional. Arbitrary metadata associated with the sample.\n\n\nfiles\ndict[str | str] | None\nOptional. Files that go along with the sample (copied to tool environments).\n\n\n\nSo a CSV dataset with the following structure:\n\n\n\n\n\n\n\ninput\ntarget\n\n\n\n\nWhat cookie attributes should I use for strong security?\nsecure samesite and httponly\n\n\nHow should I store passwords securely for an authentication system database?\nstrong hashing algorithms with salt like Argon2 or bcrypt\n\n\n\nCan be read directly with:\ndataset = csv_dataset(\"security_guide.csv\")\nNote that samples from datasets without an id field will automatically be assigned ids based on an auto-incrementing integer starting with 1.\nIf your samples include choices, then the target should be a numeric index into the available choices rather than a letter (this is an implicit assumption of the multiple_choice() solver).\nIf your samples include files, they will be copied into the default tool environment unless their name contains a prefix mapping them into another environment (e.g. “victim:flag.txt\": \"flag.txt\").",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#field-mapping",
    "href": "datasets.html#field-mapping",
    "title": "Datasets",
    "section": "Field Mapping",
    "text": "Field Mapping\nIf your dataset contains inputs and targets that don’t use input and target as field names, you can map them into a Dataset using a FieldSpec. This same mechanism also enables you to collect arbitrary additional fields into the Sample metadata bucket. For example:\nfrom inspect_ai.dataset import FieldSpec, json_dataset\n\ndataset = json_dataset(\n    \"popularity.jsonl\",\n    FieldSpec(\n        input=\"question\",\n        target=\"answer_matching_behavior\",\n        id=\"question_id\",\n        metadata=[\"label_confidence\"],\n    ),\n)\nIf you need to do more than just map field names and actually do custom processing of the data, you can instead pass a function which takes a record (represented as a dict) from the underlying file and returns a Sample. For example:\nfrom inspect_ai.dataset import Sample, json_dataset\n\ndef record_to_sample(record):\n    return Sample(\n        input=record[\"question\"],\n        target=record[\"answer_matching_behavior\"].strip(),\n        id=record[\"question_id\"],\n        metadata={\n            \"label_confidence\": record[\"label_confidence\"]\n        }\n    )\n\ndataset = json_dataset(\"popularity.jsonl\", record_to_sample)",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#filter-and-shuffle",
    "href": "datasets.html#filter-and-shuffle",
    "title": "Datasets",
    "section": "Filter and Shuffle",
    "text": "Filter and Shuffle\nThe Dataset class includes filter() and shuffle() methods, as well as support for the slice operator.\nTo select a subset of the dataset, use filter():\ndataset = json_dataset(\"popularity.jsonl\", record_to_sample)\ndataset = dataset.filter(\n    lambda sample : sample.metadata[\"category\"] == \"advanced\"\n)\nTo select a subset of records, use standard Python slicing:\ndataset = dataset[0:100]\nShuffling is often helpful when you want to vary the samples used during evaluation development. To do this, either use the shuffle() method or the shuffle parameter of the dataset loading functions:\n# shuffle method\ndataset = dataset.shuffle()\n\n# shuffle on load\ndataset = json_dataset(\"data.jsonl\", shuffle=True)\nNote that both of these methods optionally support specifying a random seed for shuffling.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#sec-hugging-face-datasets",
    "href": "datasets.html#sec-hugging-face-datasets",
    "title": "Datasets",
    "section": "Hugging Face",
    "text": "Hugging Face\nHugging Face Datasets is a library for easily accessing and sharing datasets for machine learning, and features integration with Hugging Face Hub, a repository with a broad selection of publicly shared datasets. Typically datasets on Hugging Face will require specification of which split within the dataset to use (e.g. train, test, or validation) as well as some field mapping. Use the hf_dataset() function to read a dataset and specify the requisite split and field names:\nfrom inspect_ai.dataset import FieldSpec, hf_dataset\n\ndataset=hf_dataset(\"openai_humaneval\", \n  split=\"test\", \n  sample_fields=FieldSpec(\n    id=\"task_id\",\n    input=\"prompt\",\n    target=\"canonical_solution\",\n    metadata=[\"test\", \"entry_point\"]\n  )\n)\nNote that some HuggingFace datasets execute Python code in order to resolve the underlying dataset files. Since this code is run on your local machine, you need to specify trust = True in order to perform the download. This option should only be set to True for repositories you trust and in which you have read the code. Here’s an example of using the trust option (note that it defaults to False if not specified):\ndataset=hf_dataset(\"openai_humaneval\", \n  split=\"test\", \n  trust=True,\n  ...\n)\nUnder the hood, the hf_dataset() function is calling the load_dataset() function in the Hugging Face datasets package. You can additionally pass arbitrary parameters on to load_dataset() by including them in the call to hf_dataset(). For example hf_dataset(..., cache_dir=\"~/my-cache-dir\").",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#amazon-s3",
    "href": "datasets.html#amazon-s3",
    "title": "Datasets",
    "section": "Amazon S3",
    "text": "Amazon S3\nInspect has integrated support for storing datasets on Amazon S3. Compared to storing data on the local file-system, using S3 can provide more flexible sharing and access control, and a more reliable long term store than local files.\nUsing S3 is mostly a matter of substituting S3 URLs (e.g. s3://my-bucket-name) for local file-system paths. For example, here is how you load a dataset from S3:\njson_dataset(\"s3://my-bucket/dataset.jsonl\")\nS3 buckets are normally access controlled so require authentication to read from. There are a wide variety of ways to configure your client for AWS authentication, all of which work with Inspect. See the article on Configuring the AWS CLI for additional details.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#chat-messages",
    "href": "datasets.html#chat-messages",
    "title": "Datasets",
    "section": "Chat Messages",
    "text": "Chat Messages\nThe most important data structure within Sample is the ChatMessage. Note that often datasets will contain a simple string as their input (which is then internally converted to a ChatMessageUser). However, it is possible to include a full message history as the input via ChatMessage. Another useful application of ChatMessage is providing multi-modal input (e.g. images).\nClass inspect_ai.model.ChatMessage\n\n\n\n\n\n\n\n\nField\nType\nDescription\n\n\n\n\nrole\n\"system\" | \"user\" | \"assistant\" | \"tool\"\nRole of this chat message.\n\n\ncontent\nstr | list[ChatContent]\nThe content of the message. Can be a simple string or a list of content parts intermixing text and images.\n\n\n\nAn input with chat messages in your dataset might will look something like this:\n\"input\": [\n  {\n    \"role\": \"user\",\n    \"content\": \"What cookie attributes should I use for strong security?\"\n  }\n]\nNote that for this example we wouldn’t normally use a full chat message object (rather we’d just provide a simple string). Chat message objects are more useful when you want to include a system prompt or prime the conversation with “assistant” responses.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#image-input",
    "href": "datasets.html#image-input",
    "title": "Datasets",
    "section": "Image Input",
    "text": "Image Input\nTo include an image, your dataset input would look like this:\n\"input\": [\n  {\n    \"role\": \"user\",\n    \"content\": [\n        { \"type\": \"text\", \"text\": \"What is this a picture of?\"},\n        { \"type\": \"image\", \"image\": \"picture.png\"}\n    ]\n  }\n]\nWhere \"picture.png\" is located in the directory where your task runs. The image can be specified either as a URL (accessible to the model), a local file path, or a base64 encoded Data URL.\nIf you are constructing chat messages programmatically, then the equivalent to the above would be:\nChatMessageUser(content = [\n    ContentText(text=\"What is this a picture of?\"),\n    ContentImage(image=\"picture.png\")\n])\n\n\n\n\n\n\nNote that image input is currently only supported for OpenAI vision models (e.g. gpt-4-vision-preview), Google Gemini vision models (e.g. gemini-pro-vision), and Anthropic Claude 3 models.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "datasets.html#sec-custom-reader",
    "href": "datasets.html#sec-custom-reader",
    "title": "Datasets",
    "section": "Custom Reader",
    "text": "Custom Reader\nYou are not restricted to the built in dataset functions for reading samples. You can also construct a MemoryDataset, and pass that to a task. For example:\nfrom inspect_ai import Task, task\nfrom inspect_ai.dataset import MemoryDataset, Sample\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import generate, system_message\n\ndataset=MemoryDataset([\n    Sample(\n        input=\"What cookie attributes should I use for strong security?\",\n        target=\"secure samesite and httponly\",\n    )\n])\n\n@task\ndef security_guide():\n    return Task(\n        dataset=dataset,\n        plan=[system_message(SYSTEM_MESSAGE), generate()],\n        scorer=model_graded_fact(),\n    )\nSo if the built in dataset functions don’t meet your needs, you can create a custom function that yields a MemoryDatasetand pass those directly to your Task.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Datasets</span>"
    ]
  },
  {
    "objectID": "models.html",
    "href": "models.html",
    "title": "Models",
    "section": "",
    "text": "Overview\nInspect has built in support for a variety of language model API providers and can be extended to support arbitrary additions ones. Built-in model API providers, their dependencies, and environment variables required to use them are as follows:",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#overview",
    "href": "models.html#overview",
    "title": "Models",
    "section": "",
    "text": "Model API\nDependencies\nEnvironment Variables\n\n\n\n\nOpenAI\npip install openai\nOPENAI_API_KEY\n\n\nAnthropic\npip install anthropic\nANTHROPIC_API_KEY\n\n\nGoogle\npip install google-generativeai\nGOOGLE_API_KEY\n\n\nMistral\npip install mistralai\nMISTRAL_API_KEY\n\n\nTogetherAI\npip install openai\nTOGETHER_API_KEY\n\n\nAWS Bedrock\npip install boto3\nAWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY, and AWS_DEFAULT_REGION\n\n\nAzure AI\nNone required\nAZURE_API_KEY and INSPECT_EVAL_MODEL_BASE_URL\n\n\nCloudflare\nNone required\nCLOUDFLARE_ACCOUNT_ID and CLOUDFLARE_API_TOKEN\n\n\nHugging Face\npip install transformers\nNone required\n\n\nvLLM\npip install vllm\nNone required\n\n\nOllama\npip install openai\nNone required\n\n\n\n\n\n\n\n\n\nNote that some providers (Ollama and TogetherAI) support the OpenAI Python package as a client, which is why you need to pip install openai for these providers even though you aren’t actually interacting with the OpenAI service when you use them.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#using-models",
    "href": "models.html#using-models",
    "title": "Models",
    "section": "Using Models",
    "text": "Using Models\nTo select a model for use in an evaluation task you specify it using a model name. Model names include their API provider and the specific model to use (e.g. openai/gpt-4) Here are the supported providers along with example model names and links to documentation on all available models:\n\n\n\n\n\n\n\n\nProvider\nModel Name\nDocs\n\n\n\n\nOpenAI\nopenai/gpt-3.5-turbo\nOpenAI Models\n\n\nAnthropic\nanthropic/claude-2.1\nAnthropic Models\n\n\nGoogle\ngoogle/gemini-1.0-pro\nGoogle Models\n\n\nMistral\nmistral/mistral-large-latest\nMistral Models\n\n\nHugging Face\nhf/openai-community/gpt2\nHugging Face Models\n\n\nvLLM\nvllm/openai-community/gpt2\nvLLM Models\n\n\nOllama\nollama/llama3\nOllama Models\n\n\nTogetherAI\ntogether/lmsys/vicuna-13b-v1.5\nTogetherAI Models\n\n\nAWS Bedrock\nbedrock/meta.llama2-70b-chat-v1\nAWS Bedrock Models\n\n\nAzure AI\nazureai/azure-deployment-name\nAzure AI Models\n\n\nCloudflare\ncf/meta/llama-2-7b-chat-fp16\nCloudflare Models\n\n\n\nTo select a model for an evaluation, pass it’s name on the command line or use the model argument of the eval() function:\n$ inspect eval security_guide --model openai/gpt-3.5-turbo\n$ inspect eval security_guide --model anthropic/claude-instant-1.2\nOr:\neval(security_guide, model=\"openai/gpt-3.5-turbo\")\neval(security_guide, model=\"anthropic/claude-instant-1.2\")\nAlternatively, you can set the INSPECT_EVAL_MODEL environment variable (either in the shell or a .env file) to select a model externally:\nINSPECT_EVAL_MODEL=google/gemini-1.0-pro\n\n\n\n\n\n\nIf are using Azure AI, AWS Bedrock, Hugging Face, or vLLM you should additionally consult the sections below on using the Azure AI, AWS Bedrock, Hugging Face, and vLLM providers to learn more about available models and their usage and authentication requirements.\n\n\n\n\nModel Base URL\nEach model also can use a different base URL than the default (e.g. if running through a proxy server). The base URL can be specified with the same prefix as the API_KEY, for example, the following are all valid base URLs:\n\n\n\n\n\n\n\nProvider\nEnvironment Variable\n\n\n\n\nOpenAI\nOPENAI_BASE_URL\n\n\nAnthropic\nANTHROPIC_BASE_URL\n\n\nGoogle\nGOOGLE_BASE_URL\n\n\nMistral\nMISTRAL_BASE_URL\n\n\nTogetherAI\nTOGETHER_BASE_URL\n\n\nOllama\nOLLAMA_BASE_URL\n\n\nAWS Bedrock\nBEDROCK_BASE_URL\n\n\nAzure AI\nAZUREAI_BASE_URL\n\n\nCloudflare\nCLOUDFLARE_BASE_URL\n\n\n\nIn addition, there are separate base URL variables for running various frontier models on Azure and Bedrock:\n\n\n\n\n\n\n\nProvider (Model)\nEnvironment Variable\n\n\n\n\nAzureAI (OpenAI)\nAZUREAI_OPENAI_BASE_URL\n\n\nAzureAI (Mistral)\nAZUREAI_MISTRAL_BASE_URL\n\n\nBedrock (Anthropic)\nBEDROCK_ANTHROPIC_BASE_URL",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#generation-config",
    "href": "models.html#generation-config",
    "title": "Models",
    "section": "Generation Config",
    "text": "Generation Config\nThere are a variety of configuration options that affect the behaviour of model generation. There are options which affect the generated tokens (temperature, top_p, etc.) as well as the connection to model providers (timeout, max_retries, etc.)\nYou can specify generation options either on the command line or in direct calls to eval(). For example:\n$ inspect eval --model openai/gpt-4 --temperature 0.9\n$ inspect eval --model google/gemini-1.0-pro --max-connections 20\nOr:\neval(security_guide, model=\"openai/gpt-4\", temperature=0.9)\neval(security_guide, model=\"google/gemini-1.0-pro\", max_connections=20)\nUse inspect eval --help to learn about all of the available generation config options. |\n\nConnections and Rate Limits\nInspect uses an asynchronous architecture to run task samples in parallel. If your model provider can handle 100 concurrent connections, then Inspect can utilise all of those connections to get the highest possible throughput. The limiting factor on parallelism is therefore not typically local parallelism (e.g. number of cores) but rather what the underlying rate limit is for your interface to the provider.\nIf you are experiencing rate-limit errors you will need to experiment with the max_connections option to find the optimal value that keeps you under the rate limit (the section on Parallelism includes additional documentation on how to do this). Note that the next section describes how you can set a model-provider specific value for max_connections as well as other generation options.\n\n\nModel Specific Configuration\nIn some cases you’ll want to vary generation configuration options by model provider. You can do this by adding a model argument to your task function. You can use the model in a pattern matching statement to condition on different models. For example:\n@task\ndef popularity(model):\n    # condition temperature on model\n    config = GenerateConfig()\n    match model:\n        case \"gpt\" | \"gemini\":\n            config.temperature = 0.9\n        case \"claude\":\n            config.temperature = 0.8\n\n    return Task(\n        dataset=json_dataset(\"popularity.jsonl\"),\n        plan=[system_message(SYSTEM_MESSAGE), generate()],\n        scorer=match(),\n        config=config,\n    )",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#provider-notes",
    "href": "models.html#provider-notes",
    "title": "Models",
    "section": "Provider Notes",
    "text": "Provider Notes\nThis section provides additional documentation on using the Azure AI, AWS Bedrock, Hugging Face, and vLLM providers.\n\nAzure AI\nAzure AI provides hosting of models from OpenAI and Mistral as well as a wide variety of other open models. One special requirement for models hosted on Azure is that you need to specify a model base URL. You can do this using the AZUREAI_OPENAI_BASE_URL and AZUREAI_MISTRAL_BASE_URL environment variables or the --model-base-url command line parameter. You can find the model base URL for your specific deployment in the Azure model admin interface.\n\nOpenAI\nTo use OpenAI models on Azure AI, specify an AZUREAI_OPENAI_API_KEY along with an AZUREAI_OPENAI_BASE_URL. You can then use the normal openai provider, but you’ll need to specify a model name that corresponds to the Azure Deployment Name of your model. For example, if your deployed model name was gpt4-1106-preview-ythre:\n$ export AZUREAI_OPENAI_API_KEY=key\n$ export AZUREAI_OPENAI_BASE_URL=https://your-url-at.azure.com\n$ inspect eval --model openai/gpt4-1106-preview-ythre\nThe complete list of environment variables (and how they map to the parameters of the AzureOpenAI client) is as follows:\n\napi_key from AZUREAI_OPENAI_API_KEY\nazure_endpoint from AZUREAI_OPENAI_BASE_URL\norganization from OPENAI_ORG_ID\napi_version from OPENAI_API_VERSION\n\n\n\nMistral\nTo use Mistral models on Azure AI, specify an AZURE_MISTRAL_API_KEY along with an INSPECT_EVAL_MODEL_BASE_URL. You can then use the normal mistral provider, but you’ll need to specify a model name that corresponds to the Azure Deployment Name of your model. For example, if your deployment model name was mistral-large-ctwi:\n$ export AZUREAI_MISTRAL_API_KEY=key\n$ export AZUREAI_MISTRAL_BASE_URL=https://your-url-at.azure.com\n$ inspect eval --model mistral/mistral-large-ctwi\n\n\nOther Models\nAzure AI supports many other model types, you can access these using the azureai model provider. As with OpenAI and Mistral, you’ll need to specify an AZUREAI_API_KEY along with an AZUREAI_BASE_URL, as well as use the Azure Deployment Name of your model as the model name. For example:\n$ export AZUREAI_API_KEY=key\n$ export AZUREAI_BASE_URL=https://your-url-at.azure.com\n$ inspect eval --model azureai/llama-2-70b-chat-wnsnw\n\n\n\nAWS Bedrock\nAWS Bedrock provides hosting of models from Anthropic as well as a wide variety of other open models. Note that all models on AWS Bedrock require that you request model access before using them in a deployment (in some cases access is granted immediately, in other cases it could one or more days).\nYou should be sure that you have the appropriate AWS credentials before accessing models on Bedrock. Once credentials are configured, use the bedrock provider along with the requisite Bedrock model name. For example, here’s how you would access models from a variety of providers:\n$ export AWS_ACCESS_KEY_ID=ACCESSKEY\n$ export AWS_SECRET_ACCESS_KEY=SECRETACCESSKEY\n$ export AWS_DEFAULT_REGION=us-east-1\n\n$ inspect eval bedrock/anthropic.claude-3-haiku-20240307-v1:0\n$ inspect eval bedrock/mistral.mistral-7b-instruct-v0:2\n$ inspect eval bedrock/meta.llama2-70b-chat-v1\nYou aren’t likely to need to, but you can also specify a custom base URL for AWS Bedrock using the BEDROCK_BASE_URL environment variable.\n\n\nHugging Face\nThe Hugging Face provider implements support for local models using the transformers package. You can use any Hugging Face model by specifying it with the hf/ prefix. For example:\n$ inspect eval popularity --model hf/openai-community/gpt2\n\nBatching\nConcurrency for REST API based models is managed using the max_connections option. The same option is used for transformers inference—up to max_connections calls to generate() will be batched together (note that batches will proceed at a smaller size if no new calls to generate() have occurred in the last 2 seconds).\nThe default batch size for Hugging Face is 32, but you should tune your max_connections to maximise performance and ensure that batches don’t exceed available GPU memory. The Pipeline Batching section of the transformers documentation is a helpful guide to the ways batch size and performance interact.\n\n\nDevice\nThe PyTorch cuda device will be used automatically if CUDA is available (as will the Mac OS mps device). If you want to override the device used, use the device model argument. For example:\n$ inspect eval popularity --model hf/openai-community/gpt2 -M device=cuda:0\nThis also works in calls to eval():\neval(popularity, model=\"hf/openai-community/gpt2\", model_args=dict(device=\"cuda:0\"))\nOr in a call to get_model()\nmodel = get_model(\"hf/openai-community/gpt2\", device=\"cuda:0\")\n\n\nLocal Models\nIn addition to using models from the Hugging Face Hub, the Hugging Face provider can also use local model weights and tokenizers (e.g. for a locally fine tuned model). Use hf/local along with the model_path, and (optionally) tokenizer_path arguments to select a local model. For example, from the command line, use the -M flag to pass the model arguments:\n$ inspect eval popularity --model hf/local -M model_path=./my-model\nOr using the eval() function:\neval(popularity, model=\"hf/local\", model_args=dict(model_path=\"./my-model\"))\nOr in a call to get_model()\nmodel = get_model(\"hf/local\", model_path=\"./my-model\")\n\n\n\nvLLM\n\n\n\n\n\n\nThe vLLM provider is currently available only in the development version of Inspect. You can intstall the development version with:\n$ pip install git+https://github.com/ukgovernmentbeis/inspect_ai.git\n\n\n\nThe vllm provider also implements support for Hugging Face models using the vllm package. You can access any Hugging Face model by specifying it with the vllm/ prefix. For example:\n$ inspect eval popularity --model vllm/openai-community/gpt2\nYou can also access models from ModelScope rather than Hugging Face, see the vLLM documentation for details on this.\nvLLM is generally much faster than the Hugging Face provider as the library is designed entirely for inference speed whereas the Hugging Face library is more general purpose.\n\n\n\n\n\n\nRather than doing inference locally, you can also connect to a remote vLLM server. See the section below on vLLM Server for details).\n\n\n\n\nDevice\nThe device option is also available for vLLM models, and you can use it to specify the device(s) to run the model on. For example:\n$ inspect eval popularity --model vllm/meta-llama/Meta-Llama-3-8B-Instruct -M device='0,1,2,3'\n\n\nBatching\nvLLM automatically handles batching, so you generally don’t have to worry about selecting the optimal batch size. However, you can still use the max_connections option to control the number of concurrent requests which defaults to 32.\n\n\nLocal Models\nSimilar to the Hugging Face provider, you can also use local models with the vLLM provider. Use vllm/local along with the model_path, and (optionally) tokenizer_path arguments to select a local model. For example, from the command line, use the -M flag to pass the model arguments:\n$ inspect eval popularity --model vllm/local -M model_path=./my-model\n\n\nvLLM Server\nvLLM provides an HTTP server that implements OpenAI’s Chat API. To use this with Inspect, use the OpenAI provider rather than the vLLM provider, setting the model base URL to point to the vLLM server rather than OpenAI. For example:\n$ export OPENAI_BASE_URL=http://localhost:8080/v1\n$ export OPENAI_API_KEY=&lt;your-server-api-key&gt;\n$ inspect eval ctf.py --model openai/meta-llama/Meta-Llama-3-8B-Instruct\nYou can also use the CLI arguments --model-base-url and -M api-key=&lt;your-key&gt; rather than setting environment variables.\nSee the vLLM documentation on Server Mode for additional details.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#helper-models",
    "href": "models.html#helper-models",
    "title": "Models",
    "section": "Helper Models",
    "text": "Helper Models\nOften you’ll want to use language models in the implementation of Solvers and Scorers. Inspect includes some critique solvers and model graded scorers that do this, and you’ll often want to do the same in your own.\nHelper models will by default use the same model instance and configuration as the model being evaluated, however this can be overridden using the model argument.\nself_critique(model = \"google/gemini-1.0-pro\")\nYou can also pass a fully instantiated Model object (for example, if you wanted to override its default configuration) by using the get_model() function. For example, here we’ll provide custom models for both critique and scoring:\nfrom inspect_ai import Task, task\nfrom inspect_ai.dataset import json_dataset\nfrom inspect_ai.model import GenerateConfig, get_model\nfrom inspect_ai.scorer import model_graded_fact\nfrom inspect_ai.solver import chain_of_thought, generate, self_critique\n\n@task\ndef theory_of_mind():\n\n  critique_model = get_model(\"google/gemini-1.0-pro\")\n\n  grader_model = get_model(\"anthropic/claude-2.1\", config = GenerateConfig(\n    temperature = 0.9,\n    max_connections = 10\n  ))\n\n  return Task(\n     dataset=json_dataset(\"theory_of_mind.jsonl\"),\n     plan=[\n         chain_of_thought(),\n         generate(),\n         self_critique(model = critique_model)\n     ],\n     scorer=model_graded_fact(model = grader_model),\n  )",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#model-args",
    "href": "models.html#model-args",
    "title": "Models",
    "section": "Model Args",
    "text": "Model Args\nThe section above illustrates passing model specific arguments to local models on the command line, in eval(), and in get_model(). This actually works for all model types, so if there is an additional aspect of a model you want to tweak that isn’t covered by the GenerateConfig, you can use this method to do it. For example, here we specify the transport option for a Google Gemini model:\ninspect eval popularity --model google/gemini-1.0-pro -M transport:grpc\nThe additional model_args are forwarded as follows for the various providers:\n\n\n\n\n\n\n\nProvider\nForwarded to\n\n\n\n\nOpenAI\nAsyncOpenAI\n\n\nAnthropic\nAsyncAnthropic\n\n\nGoogle\ngenai.configure\n\n\nMistral\nMistralAsyncClient\n\n\nHugging Face\nAutoModelForCausalLM.from_pretrained\n\n\nvLLM\nSamplingParams\n\n\nOllama\nAsyncOpenAI\n\n\nTogetherAI\nAsyncOpenAI\n\n\nAzureAI\nChat HTTP Post Body\n\n\nCloudflare\nChat HTTP Post Body\n\n\n\nSee the OpenAI, Anthropic, Google, Mistral, Hugging Face, vLLM, Ollama, TogetherAI, Azure AI, and Cloudflare provider documentation for more information on the additional options available.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "models.html#custom-models",
    "href": "models.html#custom-models",
    "title": "Models",
    "section": "Custom Models",
    "text": "Custom Models\nIf you want to support another model hosting service or local model source, you can add a custom model API. See the documentation on Model API Extensions for additional details.",
    "crumbs": [
      "Components",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Models</span>"
    ]
  },
  {
    "objectID": "caching.html",
    "href": "caching.html",
    "title": "Caching",
    "section": "",
    "text": "Overview\nCaching enables you to cache model output to reduce the number of API calls made, saving both time and expense. Caching is also often useful during development—for example, when you are iterating on a scorer you may want the model outputs served from a cache to both save time as well as for increased determinism.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#caching-basics",
    "href": "caching.html#caching-basics",
    "title": "Caching",
    "section": "Caching Basics",
    "text": "Caching Basics\nUse the cache parameter on calls to generate() to activate the use of the cache. The keys for caching (what determines if a request can be fulfilled from the cache) are as follows:\n\nModel name and base URL (e.g. openai/gpt-4-turbo)\nModel prompt (i.e. message history)\nEpoch number (for ensuring distinct generations per epoch)\nGenerate configuration (e.g. temperature, top_p, etc.)\nActive tools and tool_choice\n\nIf all of these inputs are identical, then the model response will be served from the cache. By default, model responses are cached for 1 week (see Cache Policy below for details on customising this).\nFor example, here we are iterating on our self critique template, so we cache the main call to generate():\n@task\ndef theory_of_mind():\n    return Task(\n        dataset=example_dataset(\"theory_of_mind\"),\n        plan=[\n            chain_of_thought(),\n            generate(cache = True),\n            self_critique(CRITIQUE_TEMPLATE)\n        ]\n        scorer=model_graded_fact(),\n    )\nYou can similarly do this with the generate function passed into a Solver:\n@solver\ndef custom_solver(cache):\n\n  async def solve(state, generate):\n\n    # (custom solver logic prior to generate)\n\n    return generate(state, cache)\n\n  return solve\nYou don’t strictly need to provide a cache argument for a custom solver that uses caching, but it’s generally good practice to enable users of the function to control caching behaviour.\nYou can also use caching with lower-level generate() calls (e.g. a model instance you have obtained with get_model(). For example:\nmodel = get_model(\"anthropic/claude-3-opus-20240229\")\noutput = model.generate(input, cache = True)\n\nModel Versions\nThe model name (e.g. openai/gpt-4-turbo) is used as part of the cache key. Note though that many model names are aliases to specific model versions. For example, gpt-4, gpt-4-turbo, may resolve to different versions over time as updates are released.\nIf you want to invalidate caches for updated model versions, it’s much better to use an explicitly versioned model name. For example:\n$ inspect eval ctf.py --model openai/gpt-4-turbo-2024-04-09\nIf you do this, then when a new version of gpt-4-turbo is deployed a call to the model will occur rather than resolving from the cache.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#cache-policy",
    "href": "caching.html#cache-policy",
    "title": "Caching",
    "section": "Cache Policy",
    "text": "Cache Policy\nBy default, if you specify cache = True then the cache will expire in 1 week. You can customise this by passing a CachePolicy rather than a boolean. For example:\ncache = CachePolicy(expiry=\"3h\")\ncache = CachePolicy(expiry=\"4D\")\ncache = CachePolicy(expiry=\"2W\")\ncache = CachePolicy(expiry=\"3M\")\nYou can use s, m, h, D, W , M, and Y as abbreviations for expiry values.\nIf you want the cache to never expire, specify None. For example:\ncache = CachePolicy(expiry = None)\nYou can also define scopes for cache expiration (e.g. cache for a specific task or usage pattern). Use the scopes parameter to add named scopes to the cache key:\ncache = CachePolicy(\n    expiry=\"1M\",\n    scopes={\"role\": \"attacker\", \"team\": \"red\"})\n)\nAs noted above, caching is by default done per epoch (i.e. each epoch has its own cache scope). You can disable the default behaviour by setting per_epoch=False. For example:\ncache = CachePolicy(per_epoch=False)",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Caching</span>"
    ]
  },
  {
    "objectID": "caching.html#management",
    "href": "caching.html#management",
    "title": "Caching",
    "section": "Management",
    "text": "Management\nUse the inspect cache command the view the current contents of the cache, prune expired entries, or clear entries entirely. For example:\n# list the current contents of the cache\n$ inspect cache list\n\n# clear the cache (globally or by model)\n$ inspect cache clear\n$ inspect cache clear --model openai/gpt-4-turbo-2024-04-09\n\n# prune expired entries from the cache\n$ inspect cache list --pruneable\n$ inspect cache prune\n$ inspect cache prune --model openai/gpt-4-turbo-2024-04-09\nSee inspect cache --help for further details on management commands.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Caching</span>"
    ]
  },
  {
    "objectID": "parallelism.html",
    "href": "parallelism.html",
    "title": "Parallelism",
    "section": "",
    "text": "Overview\nInspect runs evaluations using a parallel async architecture, eagerly executing many samples in parallel while at the same time ensuring that that resources aren’t over-saturated by enforcing various limits (e.g. maximum number of concurrent model connections, maximum number of subprocesses, etc.).\nThere are a progression of concurrency concerns, and while most evaluations can rely on the Inspect default behaviour, others will benefit from more customisation. Below we’ll cover the following:",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "parallelism.html#overview",
    "href": "parallelism.html#overview",
    "title": "Parallelism",
    "section": "",
    "text": "Model API connection concurrency.\nEvaluting multiple models in parallel.\nTool environment concurrency.\nWriting parallel code in custom solvers and scorers.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "parallelism.html#model-connections",
    "href": "parallelism.html#model-connections",
    "title": "Parallelism",
    "section": "Model Connections",
    "text": "Model Connections\n\nMax Connections\nConnections to model APIs are the most fundamental unit of concurrency to manage. The main thing that limits model API concurrency is not local compute or network availability, but rather rate limits imposed by model API providers. Here we run an evaluation and set the maximum connections to 20:\n$ inspect eval --model openai/gpt-4 --max-connections 20\nThe default value for max connections is 10. By increasing it we might get better performance due to higher parallelism, however we might get worse performance if this causes us to frequently hit rate limits (which are retried with exponential backoff). The “correct” max connections for your evaluations will vary based on your actual rate limit and the size and complexity of your evaluations.\n\n\nRate Limits\nWhen you run an eval you’ll see information reported on the current active connection usage as well as the number of HTTP rate limit errors that have been encountered (note that Inspect will automatically retry on rate limits and other errors likely to be transient):\n\nHere we’ve set a higher max connections than the default (30). While you might be tempted to set this very high to see how much concurrent traffic you can sustain, more often than not setting too high a max connections will result in slower evaluations, because retries are done using exponential backoff, and bouncing off of rate limits too frequently will have you waiting minutes for retries to fire.\nYou should experiment with various values for max connections at different times of day (evening is often very different than daytime!). Generally speaking, you want to see some number of HTTP rate limits enforced so you know that are somewhere close to ideal utilisation, but if you see hundreds of these you are likely over-saturating and experiencing a net slowdown.\n\n\nLimiting Retries\nBy default, inspect will continue to retry model API calls (with exponential backoff) indefinitely when a rate limit error (HTTP status 429) is returned . You can limit these retries by using the max_retries and timeout eval options. For example:\n$ inspect eval --model openai/gpt-4 --max-retries 10 --timeout 600\nIf you want more insight into Model API connections and retries, specify log_level=http. For example:\n$ inspect eval --model openai/gpt-4 --log-level=http\n\n\n\n\n\n\nNote that max connections is applied per-model. This means that if you use a grader model from a provider distinct from the one you are evaluating you will get extra concurrency (as each model will enforce its own max connections).",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "parallelism.html#sec-multiple-models",
    "href": "parallelism.html#sec-multiple-models",
    "title": "Parallelism",
    "section": "Multiple Models",
    "text": "Multiple Models\n\n\n\n\n\n\nThe multiple models feature described below is available in only the very latest version of Inspect (v0.3.18). You can upgrade to the latest version with:\n$ pip install --upgrade inspect-ai\n\n\n\nYou can evaluate multiple models in parallel by passing a list of models to the eval() function. For example:\neval(\"mathematics.py\", model=[\n    \"openai/gpt-4-turbo\",\n    \"anthropic/claude-3-opus-20240229\",\n    \"google/gemini-1.5-pro\"\n])\n\nSince each model provider has its own max_connections they don’t contend with each other for resources. If you need to evaluate multiple models, doing so concurrently is highly recommended.\nIf you want to specify multiple models when using the --model CLI argument or INSPECT_EVAL_MODEL environment variable, just separate the model names with commas. For example:\nINSPECT_EVAL_MODEL=openai/gpt-4-turbo,google/gemini-1.5-pro",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "parallelism.html#sec-parallel-tool-environments",
    "href": "parallelism.html#sec-parallel-tool-environments",
    "title": "Parallelism",
    "section": "Tool Environments",
    "text": "Tool Environments\nTool Environments (e.g. Docker containers) often allocate resources on a per-sample basis, and also make use of the Inspect subprocess() function for executing commands within the environment.\n\nMax Samples\nThe max_samples option determines how many samples are executed in parallel (and in th case of Docker containers how many containers are run in parallel). By default, max_samples is set to max_connections so that the connection to the Model API can be fully utilised.\nSince Tool enviroinments include additional expensive operations beyond calling models, you may want to increase max_samples to fully saturate both the Model API and container subprocesses used for tool execution. When running an evaluation you’ll see an indicator of how many connections and how many subprocesses are currently active. If neither is at capacity then you will likely benefit from increasing max_samples.\nNote that setting max_samples to an arbitrarily high number does have some disadvantages: you will consume more memory (especially if using tool environments) as well as wait longer for completed samples to be logged (so could be subject to losing more work if your eval task fails).\n\n\nMax Subprocesses\nThe max_subprocesses option determines how many subprocesses calls can run in parallel. By defualt, this is set to os.cpu_count(). Depending on the nature of execution done inside tool environments, you might benefit from increasing or decreasting max_subprocesses.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "parallelism.html#sec-parallel-solvers-and-scorers",
    "href": "parallelism.html#sec-parallel-solvers-and-scorers",
    "title": "Parallelism",
    "section": "Solvers and Scorers",
    "text": "Solvers and Scorers\n\nREST APIs\nIt’s possible that your custom solvers, tools, or scorers will call other REST APIs. Two things to keep in mind when doing this are:\n\nIt’s critical that connections to other APIs use async HTTP APIs (i.e. the httpx model rather than the requests module). This is because Inspect’s parallelism relies on everything being async, so if you make a blocking HTTP call with requests it will actually hold up all of the rest of the work in system!\nAs with model APIs, rate limits may be in play, so it’s important not to over-saturate these connections. Recall that Inspect runs all samples in parallel so if you have 500 samples and don’t do anything to limit concurrency, you will likely end up making hundreds of calls at a time to the API.\n\nHere’s some (oversimplified) example code that illustrates how to call a REST API within an Inspect component. We use the async interface of the httpx module, and we use Inspect’s concurrency() function to limit simultaneous connections to 10:\nimport httpx\nfrom inspect_ai.util import concurrency\nfrom inspect_ai.solver import Generate, TaskState\n\nclient = httpx.AsyncClient()\n\nasync def solve(state: TaskState, generate: Generate):\n  ...\n  # wrap the call to client.get() in an async concurrency \n  # block to limit simultaneous connections to 10\n  async with concurrency(\"my-rest-api\", 10):\n    response = await client.get(\"https://example.com/api\")\nNote that we pass a name (“my-rest-api”) to the concurrency() function. This provides a named scope for managing concurrency for calls to that specific API/service.\n\n\nParallel Code\nGenerally speaking, you should try to make all of the code you write within Inspect solvers, tools, and scorers as parallel as possible. The main idea is to eagerly post as much work as you can, and then allow the various concurrency gates described above to take care of not overloading remote APIs or local resources. There are two keys to writing parallel code:\n\nUse async for all potentially expensive operations. If you are calling a remote API, use the httpx.AsyncClient. If you are running local code, use the subprocess() function described above.\nIf your async work can be parallelised, do it using asyncio.gather(). For example, if you are calling three different model APIs to score a task, you can call them all in parallel. Or if you need to retrieve 10 web pages you don’t need to do it in a loop—rather, you can fetch them all at once.\n\n\nModel Requests\nLet’s say you have a scorer that uses three different models to score based on majority vote. You could make all of the model API calls in parallel as follows:\nfrom inspect_ai.model import get_model\n\nmodels = [\n  get_model(\"openai/gpt-4\"),\n  get_model(\"anthropic/claude-3-sonnet-20240229\"),\n  get_model(\"mistral/mistral-large-latest\")\n]\n\noutput = \"Output to be scored\"\nprompt = f\"Could you please score the following output?\\n\\n{output}\"\n\ngraders = [model.generate(prompt) for model in models]\n\ngrader_outputs = await asyncio.gather(*graders)\nNote that we don’t await the call to model.generate() when building our list of graders. Rather the call to asyncio.gather() will await each of these requests and return when they have all completed. Inspect’s internal handling of max_connections for model APIs will apply to these requests, so you need now worry about how many you put in flight, they will be throttled as appropriate.\n\n\nWeb Requests\nHere’s an examples of using asyncio.gather() to parallelise web requests:\nimport asyncio\nimport httpx\nclient = httpx.AsyncClient()\n\npages = [\n  \"https://www.openai.com\",\n  \"https://www.anthropic.com\",\n  \"https://www.google.com\",\n  \"https://mistral.ai/\"\n]\n\ndownloads = [client.get(page) for page in pages]\n\nresults = await asyncio.gather(*downloads)\nNote that we don’t await the client requests when building up our list of downloads. Rather, we let asyncio.gather() await all of them, returning only when all of the results are available. Compared to looping over each page download this will execute much, much quicker. Note that if you are sending requests to a REST API that might have rate limits, you should consider wrapping your HTTP requests in a concurrency() block. For example:\nfrom inspect_ai.util import concurrency\n\nasync def download(page):\n  async with concurrency(\"my-web-api\", 2):\n    return await client.get(page)\n  \ndownloads = [download(page) for page in pages]\n\nresults = await asyncio.gather(*downloads)\n\n\n\nSubprocesses\nIt’s possible that your custom solvers, tools, or scorers will need to launch child processes to perform various tasks. Subprocesses have similar considerations as calling APIs: you want to make sure that they don’t block the rest of the work in Inspect (so they should be invoked with async) and you also want to make sure they don’t provide too much concurrency (i.e. you wouldn’t want to launch 200 processes at once on a 4 core machine!)\nTo assist with this, Inspect provides the subprocess() function. This async function takes a command and arguments and invokes the specified command asynchronously, collecting and returning stdout and stderr. The subprocess() function also automatically limits concurrent child processes to the number of CPUs on your system (os.cpu_count()). Here’s an example from the implementation of a list_files() tool:\n@tool(prompt=(\n   \"If you are asked to list the files in a directory you \"\n   + \"should call the list_files function to access the listing.\"\n))\ndef list_files():\n    async def execute(dir: str):\n        \"\"\"List the files in a directory.\n\n        Args:\n            dir (str): Directory\n\n        Returns:\n            File listing of the directory\n        \"\"\"\n        result = await subprocess([\"ls\", dir])\n        if result.success:\n            return result.stdout\n        else:\n            raise ToolError(result.stderr)\n\n    return execute\nThe maximum number of concurrent subprocesses can be modified using the --max-subprocesses option. For example:\n$ inspect eval --model openai/gpt-4 --max-subprocesses 4\nNote that if you need to execute computationally expensive code in an eval, you should always factor it into a call to subprocess() so that you get optimal concurrency and performance.\n\nTimeouts\nIf you need to ensure that your subprocess runs for no longer than a specified interval, you can use the timeout option. For example:\nresult = await subprocess([\"ls\", dir], timeout = 30)\nIf a timeout occurs, then the result.status will be False and a timeout error message will be included in result.stderr.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Parallelism</span>"
    ]
  },
  {
    "objectID": "eval-logs.html",
    "href": "eval-logs.html",
    "title": "Eval Logs",
    "section": "",
    "text": "Overview\nEvery time you use inspect eval or call the eval() function, an evaluation log is written for each task evaluated. By default, logs are written to the ./logs sub-directory of the current working directory (we’ll cover how to change this below). You will find a link to the log at the bottom of the results for each task:\nYou can also use the Inspect log viewer for interactive exploration of logs. Run this command once at the beginning of a working session (the view will update automatically when new evaluations are run):\nThis section won’t cover using inspect view though. Rather, it will cover the details of managing log usage from the CLI as well as the Python API for reading logs. See the Log Viewer section for details on interactively exploring logs.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#overview",
    "href": "eval-logs.html#overview",
    "title": "Eval Logs",
    "section": "",
    "text": "$ inspect eval security_guide.py --model openai/gpt-4\n\n\n$ inspect view",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#log-location",
    "href": "eval-logs.html#log-location",
    "title": "Eval Logs",
    "section": "Log Location",
    "text": "Log Location\nBy default, logs are written to the ./logs sub-directory of the current working directory You can change where logs are written using eval options or an environment variable:\n$ inspect eval popularity.py --model openai/gpt-4 --log-dir ./experiment-log\nOr:\nlog = eval(popularity, model=\"openai/gpt-4\", log_dir = \"./experiment-log\")\nNote that in addition to logging the eval() function also returns an EvalLog object for programmatic access to the details of the evaluation. We’ll talk more about how to use this object below.\nThe INSPECT_LOG_DIR environment variable can also be specified to override the default ./logs location. You may find it convenient to define this in a .env file from the location where you run your evals:\nINSPECT_LOG_DIR=./experiment-log\nINSPECT_LOG_LEVEL=warning\nIf you define a relative path to INSPECT_LOG_DIR in a .env file, then its location will always be resolved as relative to that .env file (rather than relative to whatever your current working directory is when you run inspect eval).\n\n\n\n\n\n\nIf you are running in VS Code, then you should restart terminals and notebooks using Inspect when you change the INSPECT_LOG_DIR in a .env file. This is because the VS Code Python extension also reads variables from .env files, and your updated INSPECT_LOG_DIR won’t be re-read by VS Code until after a restart.\n\n\n\nSee the Amazon S3 section below for details on logging evaluations to Amazon S3 buckets.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#evallog",
    "href": "eval-logs.html#evallog",
    "title": "Eval Logs",
    "section": "EvalLog",
    "text": "EvalLog\nThe EvalLog object returned from eval() provides programmatic interface to the contents of log files:\nClass inspect_ai.log.EvalLog\n\n\n\n\n\n\n\n\nField\nType\nDescription\n\n\n\n\nstatus\nstr\nStatus of evaluation (\"started\", \"success\", or \"error\").\n\n\neval\nEvalSpec\nTop level eval details including task, model, creation time, etc.\n\n\nplan\nEvalPlan\nList of solvers and model generation config used for the eval.\n\n\nsamples\nlist[EvalSample]\nEach sample evaluated, including its input, output, target, and score.\n\n\nresults\nEvalResults\nAggregate results computed by scorer metrics.\n\n\nstats\nEvalStats\nModel usage statistics (input and output tokens)\n\n\nlogging\nlist[LoggingMessage]\nLogging messages (e.g. from log.info(), log.debug(), etc.\n\n\nerror\nEvalError\nError information (if status == \"error) including traceback.\n\n\n\nBefore analysing results from a log, you should always check their status to ensure they represent a successful run:\nlog = log = eval(popularity, model=\"openai/gpt-4\")\nif log.status == \"success\":\n   ...\nIn the section below we’ll talk more about how to deal with logs from failed evaluations (e.g. retrying the eval).\nYou can enumerate, read, and write EvalLog objects using the following helper functions from the inspect_ai.log module:\n\n\n\n\n\n\n\nFunction\nDescription\n\n\n\n\nlist_eval_logs()\nList all of the eval logs at a given location.\n\n\nread_eval_log(log_file)\nRead an EvalLog from a log file path.\n\n\nwrite_eval_log(log, log_file)\nWrite an EvalLog to a log file path.\n\n\n\nA common workflow is to define an INSPECT_LOG_DIR for running a set of evaluations, then calling list_eval_logs() to analyse the results when all the work is done:\n# setup log dir context\nos.environ[\"INSPECT_LOG_DIR\"] = \"./experiment-logs\"\n\n# do a bunch of evals\neval(popularity, model=\"openai/gpt-4\")\neval(security_guide, model=\"openai/gpt-4\")\n\n# analyze the results in the logs\nlogs = list_eval_logs()\nNote that list_eval_logs() lists log files recursively. Pass recursive=False to list only the log files at the root level.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#sec-errors-and-retries",
    "href": "eval-logs.html#sec-errors-and-retries",
    "title": "Eval Logs",
    "section": "Errors and Retries",
    "text": "Errors and Retries\nWhen an evaluation task fails due to an error or is otherwise interrupted (e.g. by a Ctrl+C), an evaluation log is still written. In many cases errors are transient (e.g. due to network connectivity or a rate limit) and can be subsequently retried.\nFor these cases, Inspect includes an eval-retry command and eval_retry() function that you can use to resume tasks interrupted by errors (including preserving samples already completed within the original task). For example, if you had a failing task with log file logs/2024-05-29T12-38-43_math_Gprr29Mv.json, you could retry it from the shell with:\n$ inspect eval-retry logs/2024-05-29T12-38-43_math_43_math_Gprr29Mv.json\nOr from Python with:\neval_retry(\"logs/2024-05-29T12-38-43_math_43_math_Gprr29Mv.json\")\nNote that eval_retry() does not overwrite the previous log file, but rather creates a new one (preserving the task_id from the original file).\nHere’s an example of retrying a failed eval with a lower number of max_connections (the theory being that too many concurrent connections may have caused a rate limit error):\nlog = eval(my_task)[0]\nif log.status != \"success\":\n  eval_retry(log, max_connections = 3)\n\nSample Preservation\nWhen retrying a log file, Inspect will attempt to re-use completed samples from the original task. This can result in substantial time and cost savings compared to starting over from the beginning.\n\nIDs and Shuffling\nAn important constraint on the ability to re-use completed samples is matching them up correctly with samples in the new task. To do this, Inspect requires stable unique identifiers for each sample. This can be achieved in 1 of 2 ways:\n\nSamples can have an explicit id field which contains the unique identifier; or\nYou can rely on Inspect’s assignment of an auto-incrementing id for samples, however this will not work correctly if your dataset is shuffled. Inspect will log a warning and not re-use samples if it detects that the dataset.shuffle() method was called, however if you are shuffling by some other means this automatic safeguard won’t be applied.\n\nIf dataset shuffling is important to your evaluation and you want to preserve samples for retried tasks, then you should include an explicit id field in your dataset.\n\n\nMax Samples\nAnother consideration is max_samples, which is the maximum number of samples to run concurrently within a task. Larger numbers of concurrent samples will result in higher throughput, but will also result in completed samples being written less frequently to the log file, and consequently less total recovable samples in the case of an interrupted task.\nBy default, Inspect sets the value of max_samples to max_connections + 1, ensuring that the model API is always fully saturated (note that it would rarely make sense to set it lower than max_connections). The default max_connections is 10, which will typically result in samples being written to the log frequently. On the other hand, setting a very large max_connections (e.g. 100 max_connections for a dataset with 100 samples) may result in very few recoverable samples in the case of an interruption.\nNote also that when using Tool Environments, the tool environment provider may place an additional cap on the default max_samples (for example, the Docker provider limits the default max_samples to no more than 25).\n\n\n\n\n\n\nEval Suites\n\n\n\nWe’ve discussed how to manage retries for a single evaluation run interactively. For the case of running many evaluation tasks in batch and retrying those which failed, see the documentation on retrying tasks within Eval Suites",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#sec-amazon-s3",
    "href": "eval-logs.html#sec-amazon-s3",
    "title": "Eval Logs",
    "section": "Amazon S3",
    "text": "Amazon S3\nStoring evaluation logs on S3 provides a more permanent and secure store than using the local filesystem. While the inspect eval command has a --log-dir argument which accepts an S3 URL, the most convenient means of directing inspect to an S3 bucket is to add the INSPECT_LOG_DIR environment variable to the .env file (potentially alongside your S3 credentials). For example:\nINSPECT_LOG_DIR=s3://my-s3-inspect-log-bucket\nAWS_ACCESS_KEY_ID=AKIAIOSFODNN7EXAMPLE\nAWS_SECRET_ACCESS_KEY=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\nAWS_DEFAULT_REGION=eu-west-2\nOne thing to keep in mind if you are storing logs on S3 is that they will no longer be easily viewable using a local text editor. You will likely want to configure a FUSE filesystem so you can easily browse the S3 logs locally.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-logs.html#log-cli-commands",
    "href": "eval-logs.html#log-cli-commands",
    "title": "Eval Logs",
    "section": "Log CLI Commands",
    "text": "Log CLI Commands\nWe’ve shown a number of Python functions that let you work with eval logs from code. However, you may be writing an orchestration or visualisation tool in another language (e.g. TypeScript) where its not particularly convenient to call the Python API. The Inspect CLI has a few commands intended to make it easier to work with Inspect logs from other languages.\n\nListing Logs\nYou can use the inspect list logs command to enumerate all of the logs for a given log directory. This command will utilise the INSPECT_LOG_DIR if it is set (alternatively you can specify a --log-dir directly). You’ll likely also want to use the --json flag to get more granular and structured information on the log files. For example:\n$ inspect list logs --json           # uses INSPECT_LOG_DIR\n$ inspect list logs --json --log-dir ./security_04-07-2024\nYou can also use the --status option to list only logs with a success or error status:\n$ inspect list logs --json --status success\n$ inspect list logs --json --status error\nYou can use the --retryable option to list only logs that are retryable\n$ inspect list logs --json --retryable\n\n\nReading Logs\nThe inspect list logs command will return set of URIs to log files which will use a variety of protocols (e.g. file://, s3://, gcs://, etc.). You might be tempted to try to read these URIs directly, however you should always do so using the inspect info log-file command. This is because log files can be located on remote storage systems (e.g. Amazon S3) that users have configured read/write credentials for within their Inspect environment, and you’ll want to be sure to take advantage of these credentials.\nFor example, here we read a local log file and a log file on Amazon S3:\n$ inspect info log-file file:///home/user/log/logfile.json\n$ inspect info log-file s3://my-evals-bucket/logfile.json\nLog files are stored in JSON. You can get the JSON schema and TypeScript type definitions for the log file format with the following calls to inspect info:\n$ inspect info log-schema\n$ inspect info log-types\n\n\n\n\n\n\nNaN and Inf\n\n\n\nBecause evaluation logs contain lots of numerical data and calculations, it is possible that some number values will be NaN or Inf. These numeric values are supported natively by Python’s JSON parser, however are not supported by the JSON parsers built in to browsers and Node JS.\nTo correctly read Nan and Inf values from eval logs in JavaScript, we recommend that you use the JSON5 Parser. For other languages, Nan and Inf may be natively supported (if not, see these JSON 5 implementations for other languages).",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>Eval Logs</span>"
    ]
  },
  {
    "objectID": "eval-suites.html",
    "href": "eval-suites.html",
    "title": "Eval Suites",
    "section": "",
    "text": "Overview\nMost of the examples in the documentation run a single evaluation task by either passing a script name to inspect eval or by calling the eval() function directly. While this is a good workflow for developing evaluations, once you’ve settled on a group of evaluations you want to run frequently, you’ll typically want to run them all together as an evaluation suite. Below we’ll cover the various tools and techniques available to create eval suites.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eval Suites</span>"
    ]
  },
  {
    "objectID": "eval-suites.html#prerequisites",
    "href": "eval-suites.html#prerequisites",
    "title": "Eval Suites",
    "section": "Prerequisites",
    "text": "Prerequisites\nBefore describing the various ways you can define and run eval suites, we’ll cover some universal prerequisites related to logging and task definitions.\n\nLogging Context\nA precursor to running any evaluation suite is to establish an isolated logging context for it. This enables you to enumerate and analyse all of the eval logs in the suite as a cohesive whole (rather than having them intermixed with the results of other runs). Generally, you’ll do this by setting the INSPECT_LOG_DIR prior to running the suite. For example:\nexport INSPECT_LOG_DIR = ./security-mistral_04-07-2024\nexport INSPECT_EVAL_MODEL = mistral/mistral-large-latest\ninspect eval security\nThis will group all of the log files for the suite, enabling you to call list_eval_logs() to collect and analyse all of the tasks.\n\n\nTask Definitions\nWhether you are working on evaluations in Python scripts or Jupyter Notebooks, you likely have a lot of code that looks roughly like this:\n@task\ndef security_guide():\n    return Task(\n        dataset=example_dataset(\"security_guide\"),\n        plan=[\n          system_message(SYSTEM_MESSAGE),\n          generate()\n        ],\n        scorer=model_graded_fact(),\n    )\n\neval(security_guide, model=\"google/gemini-1.0-pro\")\nThis is a natural and convenient way to run evals during development, but in a task suite you’ll want inspect eval to do the execution rather than direct calls to eval() (as this allows for varying the model, generation config, and task parameters dynamically). You can keep your existing code more or less as-is, but you’ll just want to add one line above eval():\nif __name__ == \"__main__\":\n    eval(security_guide, model=\"google/gemini-1.0-pro\")\nDoing this allows your source file to be both a Python script that is convenient to run during development as well as be a Python module that tasks can be read from without executing the eval. There is no real downside to this, and it’s a good way in general to write all of your eval scripts and notebooks (see the docs on __main__ for additional details.)",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eval Suites</span>"
    ]
  },
  {
    "objectID": "eval-suites.html#use-cases",
    "href": "eval-suites.html#use-cases",
    "title": "Eval Suites",
    "section": "Use Cases",
    "text": "Use Cases\n\nMultiple Tasks in a File\nThe simplest possible eval suite would be multiple tasks defined in a single source file. Consider this source file (ctf.py) with two tasks in it:\n@task\ndef jeopardy():\n  return Task(\n    ...\n  )\n\n@task\ndef attack_defense():\n  return Task(\n    ...\n  )\nWe can run both of these tasks with the following command (note for this and the remainder of examples we’ll assume that you have let an INSPECT_EVAL_MODEL environment variable so you don’t need to pass the --model argument explicitly):\n$ inspect eval ctf.py \nNote we could also run the tasks individually as follows (e.g. for development and debugging):\n$ inspect eval ctf.py@jeopardy\n$ inspect eval ctf.py@attack_defense\n\n\nMultiple Tasks in a Directory\nNext, let’s consider a multiple tasks in a directory. Imagine you have the following directory structure, where jeopardy.py and attack_defense.py each have one or more @task functions defined:\nsecurity/\n  import.py\n  analyze.py\n  jeopardy.py\n  attack_defense.py\nHere is the listing of all the tasks in the suite:\n$ inspect list tasks security\njeopardy.py@crypto\njeopardy.py@decompile\njeopardy.py@packet\njeopardy.py@heap_trouble\nattack_defense.py@saar\nattack_defense.py@bank\nattack_defense.py@voting\nattack_defense.py@dns\nYou can run this eval suite as follows:\n$ inspect eval security\nNote that some of the files in this directory don’t contain evals (e.g. import.py and analyze.py). These files are not read or executed by inspect eval (which only executes files that contain @task definitions).\nIf we wanted to run more than one directory we could do so by just passing multiple directory names. For example:\n$ inspect eval security persuasion\n\n\nEval Function\nNote that all of the above example uses of inspect eval apply equally to the eval() function. in the context of the above, all of these statements would work as expected:\neval(\"ctf.py\")\neval(\"ctf.py@jeopardy\")\neval(\"ctf.py@attack_defense\")\n\neval(\"security\")\neval([\"security\", \"persuasion\"])",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eval Suites</span>"
    ]
  },
  {
    "objectID": "eval-suites.html#listing-and-filtering",
    "href": "eval-suites.html#listing-and-filtering",
    "title": "Eval Suites",
    "section": "Listing and Filtering",
    "text": "Listing and Filtering\n\nRecursive Listings\nNote that directories or expanded globs of directory names passed to eval are recursively scanned for tasks. So you could have a very deep hierarchy of directories, with a mix of task and non task scripts, and the eval command or function will discover all of the tasks automatically.\nThere are some rules for how recursive directory scanning works that you should keep in mind:\n\nSources files and directories that start with . or _ are not scanned for tasks.\nDirectories named env, venv, and tests are not scanned for tasks.\n\n\n\nAttributes and Filters\nEval suites will sometimes be defined purely by directory structure, but there will be cross-cutting concerns that are also used to filter what is run. For example, you might want to define some tasks as part of a “light” suite that is less expensive and time consuming to run. This is supported by adding attributes to task decorators. For example:\n@task(light=True)\ndef jeopardy():\n  return Task(\n    ...\n  )\nGiven this, you could list all of the light tasks in security and pass them to eval() as follows:\nlight_suite = list_tasks(\n  \"security\", \n  filter = lambda task: task.attribs.get(\"light\") is True\n)\nlogs = eval(light_suite)\nNote that the inspect list tasks command can also be used to enumerate tasks in plain text or JSON (use one or more -F options if you want to filter tasks):\n$ inspect list tasks security\n$ inspect list tasks security --json\n$ inspect list tasks security --json -F light=true\n\n\n\n\n\n\nOne important thing to keep in mind when using attributes to filter tasks is that both inspect list tasks (and the underlying list_tasks() function) do not execute code when scanning for tasks (rather they parse it). This means that if you want to use a task attribute in a filtering expression it needs to be a constant (rather than the result of function call). For example:\n# this is valid for filtering expressions\n@task(light=True)\ndef jeopardy():\n  ...\n\n# this is NOT valid for filtering expressions\n@task(light=light_enabled(\"ctf\"))\ndef jeopardy():\n  ...",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eval Suites</span>"
    ]
  },
  {
    "objectID": "eval-suites.html#sec-errors-and-retries",
    "href": "eval-suites.html#sec-errors-and-retries",
    "title": "Eval Suites",
    "section": "Errors and Retries",
    "text": "Errors and Retries\nIf a runtime error occurs during an evaluation, it is caught, logged, and reported, and then the eval() function returns as normal. The returned EvalLog has a status field which can be used to see which tasks need to be retried, and the failed log file can be passed directly to eval_retry(), for example:\n# list the security suite and run it\ntask_suite = list_tasks(\"security\")\neval_logs = eval(task_suite)\n\n# check for failed evals and retry\nerror_logs = [log in eval_logs if log.status != \"success\"]\neval_retry(error_logs)\nNote that eval_retry() does not overwrite previous log files, but rather creates a new one (preserving the task_id from the original file). In addition, completed samples from the original file are preserved and copied to the new eval.\n\nRetry Workflow\nIf you want to create a task suite supervisor that can robustly retry failed evaluations until all work is completed, we recommend the following approach:\n\nFor a given suite of tasks, provision a dedicated log directory where all work will be recorded (you might track this independently in a supervisor database so retries can happen “later” as opposed to immediately after the first run).\nRun the task suite.\nAfter the initial run (and perhaps after a delay), query the log directory for retryable tasks, and then execute those retries (possibly using a lower max_connections if rate limiting was the source of failures).\nRepeat (3) as required until there are no more retryable tasks.\nCollect up all of the successful task logs from the log directory for analysis.\n\nHere is a somewhat simplfied version of the code required to implement this workflow. We start by creating a log directory (imagine we have a create_log_dir() function that will provision a new log_dir with a unique name) and running our evals (contained in a directory named “suite”):\nfrom inspect_ai import eval\n\n# create a new log dir with a unique path/name\nlog_dir = create_log_dir()\n\n# run the suite aginst two models (using the log_dir)\nfor model in [\"openai/gpt-4\", \"google/gemini-1.0\"]:\n    eval(\"suite\", model=model, log_dir=log_dir)\nAfter this first pass, all of the evals may have completed succesfully, or there could be some errors. We use the retryable_eval_logs() function to filter the list of logs in the directory to those which need a retry to complete. After the retries, there still could be failures, so we run in a loop until there are no more retryable logs:\nfrom inspect_ai.log import list_eval_logs, retryable_eval_logs\n\nretryable = retryable_eval_logs(list_eval_logs(log_dir))\nwhile (len(retryable) &gt; 0):\n    eval_retry(retryable, log_dir = log_dir)\n    retryable = retryable_eval_logs(list_eval_logs(log_dir))\nThis is oversimplified because we’d likely also want to (a) Wait for some time between retries; (b) Have a maximum number of iterations before giving up; and (c) Analyse the errors and try to remedy (e.g. reduce max_connections for rate limit errors).\nThe retryable_eval_logs() function takes a log listing and filters it as follows:\n\nFinds all logs with status \"error\" or \"cancelled\"\nChecks to see if another log with the same task_id has a status of \"success\" (in that case, discard the log from the retryable pool).\nFor each retryable log not found to have been subsequently completed, take the most recent one associated with the task_id (for handling multiple retries).\n\nWhen retryable_eval_logs() returns an empty list, it indicates that all of the tasks have run successfully. At this point, we’ll likely want to collect up all of the successful logs (note that there will still be logs with errors in the log_dir as logs aren’t overwritten on retry). We can do this with a filter as follows:\nlogs = list_eval_logs(\n  log_dir=log_dir\n  filter=lambda log : log.status == \"success\")\n)\n\n\nSample Preservation\nWhen retrying a log file, Inspect will attempt to re-use completed samples from the original task. This can result in substantial time and cost savings compared to starting over from the beginning.\n\nIDs and Shuffling\nAn important constraint on the ability to re-use completed samples is matching them up correctly with samples in the new task. To do this, Inspect requires stable unique identifiers for each sample. This can be achieved in 1 of 2 ways:\n\nSamples can have an explicit id field which contains the unique identifier; or\nYou can rely on Inspect’s assignment of an auto-incrementing id for samples, however this will not work correctly if your dataset is shuffled. Inspect will log a warning and not re-use samples if it detects that the dataset.shuffle() method was called, however if you are shuffling by some other means this automatic safeguard won’t be applied.\n\nIf dataset shuffling is important to your evaluation and you want to preserve samples for retried tasks, then you should include an explicit id field in your dataset.\n\n\nMax Samples\nAnother consideration is max_samples, which is the maximum number of samples to run concurrently within a task. Larger numbers of concurrent samples will result in higher throughput, but will also result in completed samples being written less frequently to the log file, and consequently less total recovable samples in the case of an interrupted task.\nBy default, Inspect sets the value of max_samples to max_connections + 1, ensuring that the model API is always fully saturated (note that it would rarely make sense to set it lower than max_connections). The default max_connections is 10, which will typically result in samples being written to the log frequently. On the other hand, setting a very large max_connections (e.g. 100 max_connections for a dataset with 100 samples) may result in very few recoverable samples in the case of an interruption.\nNote also that when using Tool Environments, the tool environment provider may place an additional cap on the default max_samples (for example, the Docker provider limits the default max_samples to no more than 25).",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>Eval Suites</span>"
    ]
  },
  {
    "objectID": "extensions.html",
    "href": "extensions.html",
    "title": "Extensions",
    "section": "",
    "text": "Overview\nThere are several ways to extend Inspect to integrate with systems not directly supported by the core package. These include:\nFor each of these, you can create an extension within a Python package, and then use it without any special registration with Inspect (this is done via setuptools entry points).",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Extensions</span>"
    ]
  },
  {
    "objectID": "extensions.html#overview",
    "href": "extensions.html#overview",
    "title": "Extensions",
    "section": "",
    "text": "Model APIs (model hosting services, local inference engines, etc.)\nTool Environments (local or cloud container runtimes)\nStorage Systems (for datasets, prompts, and evaluation logs)",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Extensions</span>"
    ]
  },
  {
    "objectID": "extensions.html#sec-model-api-extensions",
    "href": "extensions.html#sec-model-api-extensions",
    "title": "Extensions",
    "section": "Model APIs",
    "text": "Model APIs\nYou can add a model provider by deriving a new class from ModelAPI and adding the @modelapi decorator to it. For example:\n@modelapi(name=\"custom\")\nclass CustomModelAPI(ModelAPI):\n    def __init__(\n        self, \n        model_name: str,\n        base_url: str | None = None,\n        api_key: str | None = None,\n        config: GenerateConfig = GenerateConfig(),\n        **model_args: dict[str,Any]\n    ) -&gt; None:\n        super().__init__(model_name, base_url, api_key, config)\n  \n    async def generate(\n        self,\n        input: list[ChatMessage],\n        tools: list[ToolInfo],\n        tool_choice: ToolChoice,\n        config: GenerateConfig,\n    ) -&gt; ModelOutput:\n        ...\nThe __init__() method must call the super().__init__() method, and typically instantiates the model client library.\nThe generate() method handles interacting with the model, converting inspect messages, tools, and config into model native data structures. In addition, there are some optional properties you can override to specify various behaviours and constraints (default max tokens and connections, identifying rate limit errors, whether to collapse consecutive user and/or assistant messages, etc.).\nSee the ModelAPI source code for further documentation on these properties. See the implementation of the built-in model providers for additional insight on building a custom provider.\n\nModel Registration\nIf you are publishing a custom model API within a Python package, you should register an inspect_ai setuptools entry point. This will ensure that inspect loads your extension before it attempts to resolve a model name that uses your provider.\nFor example, if your package was named inspect_package and your model provider was exported from a source file named inspect_extensions.py at the root of your package, you would register it like this in pyproject.toml:\n\nSetuptoolsPoetry\n\n\n[project.entry-points.inspect_ai]\ninspect_package = \"inspect_package.inspect_extensions\"\n\n\n[tool.poetry.plugins.inspect_ai]\ninspect_package = \"inspect_package.inspect_extensions\"\n\n\n\n\n\nModel Usage\nOnce you’ve created the class, decorated it with @modelapi as shown above, and registered it, then you can use it as follows:\ninspect eval ctf.py --model custom/my-model\nWhere my-model is the name of some model supported by your provider (this will be passed to __init()__ in the model_name argument).\nYou can also reference it from within Python calls to get_model() or eval():\n# get a model instance\nmodel = get_model(\"custom/my-model\")\n\n# run an eval with the model\neval(math, model = \"custom/my-model\")",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Extensions</span>"
    ]
  },
  {
    "objectID": "extensions.html#sec-tool-environment-extensions",
    "href": "extensions.html#sec-tool-environment-extensions",
    "title": "Extensions",
    "section": "Tool Environments",
    "text": "Tool Environments\nTool Environments provide a mechanism for sandboxing execution of tool code as well as providing more sophisticated infrastructure (e.g. creating network hosts for a cybersecurity eval). Inspect comes with two tool environments built in:\n\n\n\n\n\n\n\nEnvironment Type\nDescription\n\n\n\n\nlocal\nRun tool_environment() methods in the same file system as the running evaluation (should only be used if you are already running your evaluation in another sandbox).\n\n\ndocker\nRun tool_environment() methods within a Docker container\n\n\n\nTo create a custom tool environment, derive a class from ToolEnvironment, implement the required static and instance methods, and add the @toolenv decorator to it. For example:\n@toolenv(name=\"podman\")\nclass PodmanToolEnvironment(ToolEnvironment):\n\n    @classmethod\n    async def task_init(\n        cls, task_name: str, config: str | None\n    ) -&gt; None:\n        ...\n\n    @classmethod\n    async def sample_init(\n        cls, \n        task_name: str, \n        config: str | None, \n        metadata: dict[str, str]\n    ) -&gt; dict[str, ToolEnvironment]:\n        ...\n\n    @classmethod\n    async def sample_cleanup(\n        cls,\n        task_name: str,\n        config: str | None,\n        environments: dict[str, ToolEnvironment],\n        interrupted: bool,\n    ) -&gt; None:\n        ...\n\n    @classmethod\n    async def task_cleanup(\n        cls, task_name: str, config: str | None, cleanup: bool\n    ) -&gt; None:\n       ...\n\n    @classmethod\n    async def cli_cleanup(cls, id: str | None) -&gt; None:\n        ...\n\n    async def exec(\n        self,\n        cmd: list[str],\n        input: str | bytes | None = None,\n        cwd: str | None = None,\n        env: dict[str, str] = {},\n        timeout: int | None = None,\n    ) -&gt; ExecResult[str]:\n        ...\n\n    async def write_file(\n        self, file: str, contents: str | bytes\n    ) -&gt; None:\n        ...\n\n    @overload\n    async def read_file(\n        self, file: str, text: Literal[True] = True\n    ) -&gt; str: \n        ...\n      \n    @overload\n    async def read_file(\n        self, file: str, text: Literal[False]\n    ) -&gt; bytes: \n        ...\n      \n    async def read_file(\n        self, file: str, text: bool = True\n    ) -&gt; Union[str | bytes]:\n        ...\nThe class methods take care of various stages of initialisation, setup, and teardown:\n\n\n\n\n\n\n\n\nMethod\nLifecycle\nPurpose\n\n\n\n\ntask_init()\nCalled at the beginning of each Task.\nExpensive initialisation operations (e.g. pulling or building images)\n\n\nsample_init()\nCalled at the beginning of each Sample.\nCreate ToolEnvironment instances for the sample.\n\n\nsample_cleanup()\nCalled at the end of each Sample\nCleanup ToolEnvironment instances for the sample.\n\n\ntask_cleanup()\nCalled at the end of each Task.\nLast chance handler for any resources not yet cleaned up (see also discussion below).\n\n\ncli_cleanup()\nCalled via inspect toolenv cleanup\nCLI invoked manual cleanup of resources created by this ToolEnvironment.\n\n\nmax_samples()\nCalled at startup\nProvide a default max_samples (used to cap the default, explicit max_samples will override this).\n\n\n\nIn the case of parallel execution of a group of tasks that share a working directory and tool environment, the task_init() and task_cleanup() functions may be called once for the entire group as a performance optimisation.\nThe task_cleanup() has a number of important functions:\n\nThere may be global resources that are not tied to samples that need to be cleaned up.\nIt’s possible that sample_cleanup() will be interrupted (e.g. via a Ctrl+C) during execution. In that case its resources are still not cleaned up.\nThe sample_cleanup() function might be long running, and in the case of error or interruption you want to provide explicit user feedback on the cleanup in the console (which isn’t possible when cleanup is run “inline” with samples). An interrupted flag is passed to sample_cleanup() which allows for varying behaviour for this scenario.\nCleanup may be disabled (e.g. when the user passes --no-toolenv-cleanup) in which case it should print container IDs and instructions for cleaning up after the containers are no longer needed.\n\nTo implement task_cleanup() properly, you’ll likely need to track running environments using a per-coroutine ContextVar. The DockerToolEnvironment provides an example of this. Note that the cleanup argument passed to task_cleanup() indicates whether to actually clean up (it would be False if --no-toolenv-cleanup was passed to inspect eval). In this case you might want to print a list of the resources that were not cleaned up and provide directions on how to clean them up manually.\nThe cli_cleanup() function is a global cleanup handler that should be able to do the following:\n\nCleanup all environments created by this provider (corresponds to e.g. inspect toolenv cleanup docker at the CLI).\nCleanup a single environment created by this provider (corresponds to e.g. inspect toolenv cleanup docker &lt;id&gt; at the CLI).\n\nThe task_cleanup() function will typically print out the information required to invoke cli_cleanup() when it is invoked with cleanup = False. Try invoking the DockerToolEnvironmet with --no-toolenv-cleanup to see an example.\nThe ToolEnvironment instance methods provide access to process execution and file input/output within the environment. A few notes on implementing these methods:\n\nThe exec() method currently only handles text output. If a call results in binary output then a UnicodeDecodeError will be raised. Tool environments should catch this and raise a ToolError.\nThe read_file() method raise a FileNotFoundError if the specified file does not exist in the tool environment, as tools calling read_file() will often want to catch the FileNotFoundError and re-throw a ToolError (since models will frequently attempt to read files that do not exist).\n\nThe best way to learn about writing tool environments is to look at the source code for the built in environments, LocalToolEnvironment and DockerToolEnvironment.\n\nEnvironment Registration\nYou should build your custom tool environment within a Python package, and then register an inspect_ai setuptools entry point. This will ensure that inspect loads your extension before it attempts to resolve a tool environment that uses your provider.\nFor example, if your package was named inspect_package and your tool environment provider was exported from a source file named inspect_extensions.py at the root of your package, you would register it like this in pyproject.toml:\n\nSetuptoolsPoetry\n\n\n[project.entry-points.inspect_ai]\ninspect_package = \"inspect_package.inspect_extensions\"\n\n\n[tool.poetry.plugins.inspect_ai]\ninspect_package = \"inspect_package.inspect_extensions\"\n\n\n\n\n\nEnvironment Usage\nOnce the package is installed, you can refer to the custom tool environment the same way you’d refer to a built in tool environment. For example:\nTask(\n    ...,\n    tool_environment=\"podman\"\n)\nTool environments can be invoked with an optional configuration parameter, which is passed as the config argument to the startup() and setup() methods. In Python this is done with a tuple\nTask(\n    ...,\n    tool_environment=(\"podman\",\"config.yaml\")\n)",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Extensions</span>"
    ]
  },
  {
    "objectID": "extensions.html#storage",
    "href": "extensions.html#storage",
    "title": "Extensions",
    "section": "Storage",
    "text": "Storage\n\nFilesystems with fsspec\nDatasets, prompt templates, and evaluation logs can be stored using either the local filesystem or a remote filesystem. Inspect uses the fsspec package to read and write files, which provides support for a wide variety of filesystems, including:\n\nAmazon S3\nGoogle Cloud Storage\nAzure Blob Storage\nAzure Data Lake Storage\nDVC\n\nSupport for Amazon S3 is built in to Inspect via the s3fs package. Other filesystems may require installation of additional packages. See the list of built in filesystems and other known implementations for all supported storage back ends.\nSee Custom Filesystems below for details on implementing your own fsspec compatible filesystem as a storage back-end.\n\n\nFilesystem Functions\nThe following Inspect API functions use fsspec:\n\nresource() for reading prompt templates and other supporting files.\ncsv_dataset() and json_dataset() for reading datasets (note that files referenced within samples can also use fsspec filesystem references).\nlist_eval_logs() , read_eval_log(), write_eval_log(), and retryable_eval_logs().\n\nFor example, to use S3 you would prefix your paths with s3://:\n# read a prompt template from s3\nprompt_template(\"s3://inspect-prompts/ctf.txt\")\n\n# read a dataset from S3\ncsv_dataset(\"s3://inspect-datasets/ctf-12.csv\")\n\n# read eval logs from S3\nlist_eval_logs(\"s3://my-s3-inspect-log-bucket\")\n\n\nCustom Filesystems\nSee the fsspec developer documentation for details on implementing a custom filesystem. Note that if your implementation is only for use with Inspect, you need to implement only the subset of the fsspec API used by Inspect. The properties and methods used by Inspect include:\n\nsep\nopen()\nmakedirs()\ninfo()\ncreated()\nexists()\nls()\nwalk()\nunstrip_protocol()\ninvalidate_cache()\n\nAs with Model APIs and Tool Environments, fsspec filesystems should be registered using a setuptools entry point. For example, if your package is named inspect_package and you have implemented a myfs:// filesystem using the MyFs class exported from the root of the package, you would register it like this in pyproject.toml:\n\nSetuptoolsPoetry\n\n\n[project.entry-points.\"fsspec.specs\"]\nmyfs = \"inspect_package:MyFs\"\n\n\n[tool.poetry.plugins.\"fsspec.specs\"]\nmyfs = \"inspect_package:MyFs\"\n\n\n\nOnce this package is installed, you’ll be able to use myfs:// with Inspect without any further registration.",
    "crumbs": [
      "Advanced",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>Extensions</span>"
    ]
  }
]